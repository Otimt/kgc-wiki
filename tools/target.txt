前端开发基础	HTML	HTML 基础教程	HTML 简介	什么是 HTML	什么是 HTML	html的标签html文档的结构	http://www.w3school.com.cn/html/html_jianjie.asp
前端开发基础	HTML	HTML 基础教程	HTML 元素	HTML 元素语法嵌套的 HTML 元素	HTML 元素语法嵌套的 HTML 元素	不要忘记结束标签空的 HTML 元素没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。<br> 就是没有关闭标签的空元素（<br> 标签定义换行）。HTML 提示：使用小写标签	http://www.w3school.com.cn/html/html_elements.asp
前端开发基础	HTML	HTML 基础教程	HTML 属性	HTML 属性	HTML 属性	始终为属性值加引号使用小写属性	http://www.w3school.com.cn/html/html_attributes.asp
前端开发基础	HTML	HTML 基础教程	HTML 标题	HTML 标题	HTML 标题	在 HTML 文档中，标题很重要浏览器会自动地在标题的前后添加空行	http://www.w3school.com.cn/html/html_headings.asp
前端开发基础	HTML	HTML 基础教程	HTML 段落	HTML 段落	HTML 段落	不要忘记结束标签	http://www.w3school.com.cn/html/html_paragraphs.asp
前端开发基础	HTML	HTML 基础教程	HTML 注释	HTML 注释标签	HTML 注释标签	 HTML 中偶尔发现条件注释条件注释定义只有 Internet Explorer 执行的 HTML 标签	http://www.w3school.com.cn/html/html_comments.asp
前端开发基础	HTML	HTML 基础教程	HTML CSS	如何使用样式内部样式表外部样式表内联样式	如何使用样式内部样式表外部样式表内联样式	注意不同样式表的优先级	http://www.w3school.com.cn/html/html_css.asp
前端开发基础	HTML	HTML 基础教程	HTML 链接	HTML 链接语法target 属性name 属性	HTML 链接语法target 属性name 属性	命名锚经常用于在大型文档开始位置上创建目录。可以为每个章节赋予一个命名锚，然后把链接到这些锚的链接放到文档的上部。如果您经常访问百度百科，您会发现其中几乎每个词条都采用这样的导航方式假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生	http://www.w3school.com.cn/html/html_links.asp
前端开发基础	HTML	HTML 基础教程	HTML 图像	图像标签（<img>）和源属性（Src）替换文本属性（Alt）	图像标签（<img>）和源属性（Src）替换文本属性（Alt）	注意引入图片时候的绝对路径和相对路径	http://www.w3school.com.cn/html/html_images.asp
前端开发基础	HTML	HTML 基础教程	HTML 表格	表格标签跨行或跨列的表格单元格	跨行或跨列的表格单元格	如何定义跨行或跨列的表格单元格	http://www.w3school.com.cn/html/html_tables.asp
前端开发基础	HTML	HTML 基础教程	HTML 列表	有序、无序和定义列表	有序、无序和定义列表	三种列表的使用场景和显示样式	http://www.w3school.com.cn/html/html_lists.asp
前端开发基础	HTML	HTML 基础教程	HTML 块元素	块元素和行内元素的特性典型的块元素和行内元素	块元素和行内元素的特性典型的块元素和行内元素	块级元素在浏览器显示时，通常会以新行来开始（和结束）。例子：<h1>, <p>, <ul>, <table>内联元素在显示时通常不会以新行开始。例子：<b>, <td>, <a>, <img>	http://www.w3school.com.cn/html/html_blocks.asp
前端开发基础	HTML	HTML 基础教程	HTML 布局	布局元素	布局元素	理解常见的布局会使用布局元素并理解其语义化	http://www.w3school.com.cn/html/html_layout.asp
前端开发基础	HTML	HTML 基础教程	HTML 内联框架	iframe元素及属性	iframe元素及属性	Iframe的使用场景	http://www.w3school.com.cn/html/html_iframe.asp
前端开发基础	HTML	HTML 基础教程	HTML文档类型	DOCTYPE	DOCTYPEHTML 不同版本的声明	<!DOCTYPE> 声明帮助浏览器正确地显示网页	http://www.w3school.com.cn/html/html_doctype.asp
前端开发基础	HTML	HTML 基础教程	HTML 表单	form元素  Action 属性Method 属性	form元素  Action 属性Method 属性	何时使用 GET何时使用 POST	http://www.w3school.com.cn/html/html_forms.asp
前端开发基础	HTML	HTML 基础教程	HTML 表单元素	<input> 元素<select> 元素<textarea> 元素<button> 元素	<input> 元素<select> 元素<textarea> 元素<button> 元素	注意不同的表单元素使用场景和样式	http://www.w3school.com.cn/html/html_form_elements.asp
前端开发基础	HTML	HTML 基础教程	HTML 输入类型	<input> 元素的输入类型text、password、submit、 radio、checkbox、button	<input> 元素的输入类型text、password、submit、 radio、checkbox、button	注意不同输入类型的使用场景及特性	http://www.w3school.com.cn/html/html_form_input_types.asp
前端开发基础	HTML	HTML 基础教程	HTML Input 属性	value 属性readonly 属性disabled 属性required 属性placeholder 属性pattern 属性	required 属性placeholder 属性pattern 属性	placeholder 属性placeholder 属性规定用以描述输入字段预期值的提示（样本值或有关格式的简短描述）。该提示会在用户输入值之前显示在输入字段中。placeholder 属性适用于以下输入类型：text、search、url、tel、email 以及 passwordrequired 属性required 属性是布尔属性。如果设置，则规定在提交表单之前必须填写输入字段。required 属性适用于以下输入类型：text、search、url、tel、email、password、date pickers、number、checkbox、radio、and filepattern 属性pattern 属性规定用于检查 <input> 元素值的正则表达式。pattern 属性适用于以下输入类型：text、search、url、tel、email、and password。提示：请使用全局的 title 属性对模式进行描述以帮助用户。提示：请在我们的 JavaScript 教程中学习更多有关正则表达式的知识	http://www.w3school.com.cn/html/html_form_attributes.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 简介	什么是 HTML5？	HTML5 建立的一些规则HTML5 中的一些有趣的新特性	HTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。HTML 的上一个版本诞生于 1999 年。自从那以后，Web 世界已经经历了巨变。HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。	http://www.w3school.com.cn/html5/html_5_intro.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 视频	HTML 5 视频格式和属性	HTML 5 视频格式和属性	Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件	http://www.w3school.com.cn/html5/html_5_video.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 Video + DOM	HTML5 <video> 元素同样拥有方法、属性和事件。	HTML5 <video> 元素同样拥有方法、属性和事件。	HTML5 <video> - 方法、属性以及事件	http://www.w3school.com.cn/html5/html_5_video_dom.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 音频	audio 元素支持三种音频格式	audio 元素支持三种音频格式	大多数音频是通过插件（比如 Flash）来播放的。然而，并非所有浏览器都拥有同样的插件。HTML5 规定了一种通过 audio 元素来包含音频的标准方法。audio 元素能够播放声音文件或者音频流。	http://www.w3school.com.cn/html5/html_5_audio.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 Canvas	canvas 元素用于在网页上绘制图形	什么是 Canvas？HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像	HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法	http://www.w3school.com.cn/html5/html_5_canvas.asp
前端开发基础	HTML5	HTML5 教程	HTML5 SVG	什么是SVG？SVG 的优势	什么是SVG？	SVG 意为可缩放矢量图形（Scalable Vector Graphics）。SVG 使用 XML 格式定义图像。在我们的 SVG 教程中，你将学习 SVG 的相关知识。	http://www.w3school.com.cn/html5/html_5_svg.asp
前端开发基础	HTML5	HTML5 教程	HTML5 地理定位	定位用户的位置HTML5 - 使用地理定位	定位用户的位置HTML5 - 使用地理定位	检测是否支持地理定位如果支持，则运行 getCurrentPosition() 方法。如果不支持，则向用户显示一段消息。如果getCurrentPosition()运行成功，则向参数showPosition中规定的函数返回一个coordinates对象showPosition() 函数获得并显示经度和纬度	http://www.w3school.com.cn/html5/html_5_geolocation.asp
前端开发基础	HTML5	HTML5 教程	HTML 5 Web 存储	在客户端存储数据localStorage 方法sessionStorage 方法	localStorage 方法sessionStorage 方法	HTML5 提供了两种在客户端存储数据的新方法：localStorage - 没有时间限制的数据存储sessionStorage - 针对一个 session 的数据存储	http://www.w3school.com.cn/html5/html_5_webstorage.asp
前端开发基础	HTML5	HTML5 表单	HTML5 Input 类型	HTML5 新的 Input 类型	HTML5 新的 Input 类型	HTML5 拥有多个新的表单输入类型。这些新特性提供了更好的输入控制和验证。	http://www.w3school.com.cn/html5/html_5_form_input_types.asp
前端开发基础	HTML5	HTML5 表单	HTML5 表单元素	HTML5 的新的表单元素	HTML5 的新的表单元素	本章介绍以下新的表单元素：datalistkeygenoutput	http://www.w3school.com.cn/html5/html_5_form_elements.asp
前端开发基础	HTML5	HTML5 表单	HTML5 表单属性	新的 form 属性新的 input 属性	新的 form 属性新的 input 属性	新的 form 属性：autocompletenovalidate新的 input 属性：autocompleteautofocusformform overrides (formaction, formenctype, formmethod, formnovalidate, formtarget)height 和 widthlistmin, max 和 stepmultiplepattern (regexp)placeholderrequired	http://www.w3school.com.cn/html5/html_5_form_attributes.asp
前端开发基础	CSS	CSS 基础	CSS 简介	CSS 概述	CSS 概述	CSS 指层叠样式表 (Cascading Style Sheets)样式定义如何显示 HTML 元素样式通常存储在样式表中把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题外部样式表可以极大提高工作效率外部样式表通常存储在 CSS 文件中多个样式定义可层叠为一	http://www.w3school.com.cn/css/css_jianjie.asp
前端开发基础	CSS	CSS 基础	CSS 基础语法	CSS 语法	CSS 语法	CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。	http://www.w3school.com.cn/css/css_syntax.asp
前端开发基础	CSS	CSS 基础	CSS 高级语法	选择器的分组继承及其问题	选择器的分组继承及其问题	选择器的分组你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。在下面的例子中，我们对所有的标题元素进行了分组。所有的标题元素都是绿色的。	http://www.w3school.com.cn/css/css_syntax_pro.asp
前端开发基础	CSS	CSS 基础	CSS 派生选择器	派生选择器	派生选择器	通过依据元素在其位置的上下文关系来定义样式，你可以使标记更加简洁。	http://www.w3school.com.cn/css/css_syntax_descendant_selector.asp
前端开发基础	CSS	CSS 基础	CSS id 选择器	id 选择器	id 选择器	一个选择器，多种用法即使被标注为 sidebar 的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次	http://www.w3school.com.cn/css/css_syntax_id_selector.asp
前端开发基础	CSS	CSS 基础	CSS 类选择器	CSS 类选择器	CSS 类选择器	和 id 一样，class 也可被用作派生选择器	http://www.w3school.com.cn/css/css_syntax_class_selector.asp
前端开发基础	CSS	CSS 基础	CSS 属性选择器	CSS 属性选择器	CSS 属性选择器	只有在规定了 !DOCTYPE 时，IE7 和 IE8 才支持属性选择器。在 IE6 及更低的版本中，不支持属性选择	http://www.w3school.com.cn/css/css_syntax_attribute_selector.asp
前端开发基础	CSS	CSS 基础	CSS创建	如何创建 CSS	如何创建 CSS	当读到一个样式表时，浏览器会根据它来格式化 HTML 文档。插入样式表的方法有三种：外部样式表、内部样式表、内联样式	http://www.w3school.com.cn/css/css_howto.asp
前端开发基础	CSS	CSS 样式	CSS 背景	背景色背景图像背景重复背景定位	背景图像背景重复背景定位	CSS 允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果。CSS 在这方面的能力远远在 HTML 之上。	http://www.w3school.com.cn/css/css_background.asp
前端开发基础	CSS	CSS 样式	CSS 文本	CSS 文本属性	CSS 文本属性	CSS 文本属性可定义文本的外观。通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。	http://www.w3school.com.cn/css/css_text.asp
前端开发基础	CSS	CSS 样式	CSS 字体	CSS 字体系列	CSS 字体属性	CSS 字体属性定义文本的字体系列、大小、加粗、风格（如斜体）和变形（如小型大写字母）	http://www.w3school.com.cn/css/css_font.asp
前端开发基础	CSS	CSS 样式	CSS 链接	设置链接的样式常见的链接样式	设置链接的样式常见的链接样式	能够设置链接样式的 CSS 属性有很多种（例如 color, font-family, background 等等）。链接的特殊性在于能够根据它们所处的状态来设置它们的样式。链接的四种状态：a:link - 普通的、未被访问的链接a:visited - 用户已访问的链接a:hover - 鼠标指针位于链接的上方a:active - 链接被点击的时刻	http://www.w3school.com.cn/css/css_link.asp
前端开发基础	CSS	CSS 样式	CSS 列表	CSS 列表属性(list)	CSS 列表属性(list)	CSS 列表属性允许你放置、改变列表项标志，或者将图像作为列表项标志。	http://www.w3school.com.cn/css/css_list.asp
前端开发基础	CSS	CSS 样式	CSS 表格	CSS Table 属性	CSS Table 属性	CSS 表格属性可以帮助您极大地改善表格的外观	http://www.w3school.com.cn/css/css_table.asp
前端开发基础	CSS	CSS 框模型	CSS 框模型概述	浏览器兼容性CSS 框模型	浏览器兼容性CSS 框模型	CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。	http://www.w3school.com.cn/css/css_boxmodel.asp
前端开发基础	CSS	CSS 框模型	CSS 内边距	CSS padding 属性	CSS padding 属性	元素的内边距在边框和内容区之间。控制该区域最简单的属性是 padding 属性。CSS padding 属性定义元素边框与元素内容之间的空白区域。	http://www.w3school.com.cn/css/css_padding.asp
前端开发基础	CSS	CSS 框模型	CSS 边框	CSS 边框属性	CSS 边框属性	元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。CSS border 属性允许你规定元素边框的样式、宽度和颜色。	http://www.w3school.com.cn/css/css_border.asp
前端开发基础	CSS	CSS 框模型	CSS 外边距	CSS 外边距属性	CSS 外边距属性	围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。设置外边距的最简单的方法就是使用 margin 属性，这个属性接受任何长度单位、百分数值甚至负值。	http://www.w3school.com.cn/css/css_margin.asp
前端开发基础	CSS	CSS 框模型	CSS 外边距合并	外边距合并	外边距合并	外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。	http://www.w3school.com.cn/css/css_margin_collapsing.asp
前端开发基础	CSS	CSS定位	CSS 定位的概念	CSS 定位	CSS 定位机制z-index	CSS 有三种基本的定位机制：普通流、浮动和绝对定位。	http://www.w3school.com.cn/css/css_positioning.asp
前端开发基础	CSS	CSS定位	CSS 相对定位	CSS 相对定位偏移量	CSS 相对定位偏移量	在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框	http://www.w3school.com.cn/css/css_positioning_relative.asp
前端开发基础	CSS	CSS定位	CSS 绝对定位	CSS 绝对定位偏移量定位父级	CSS 绝对定位偏移量定位父级	因为绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置 z-index 属性来控制这些框的堆放次序	http://www.w3school.com.cn/css/css_positioning_absolute.asp
前端开发基础	CSS	CSS定位	CSS 浮动	float 属性清除浮动	float 属性清除浮动	注意浮动的原理以及清除浮动的用法	http://www.w3school.com.cn/css/css_positioning_floating.asp
前端开发基础	CSS	CSS选择器	CSS 元素选择器	基本选择器类选择器id选择器	基本选择器类选择器id选择器	注意选择器的概念以及使用	http://www.w3school.com.cn/css/css_selector_type.asp
前端开发基础	CSS	CSS选择器	CSS 后代选择器	根据上下文选择元素语法解释具体应用	根据上下文选择元素语法解释具体应用	有关后代选择器有一个易被忽视的方面，即两个元素之间的层次间隔可以是无限的。例如，如果写作 ul em，这个语法就会选择从 ul 元素继承的所有 em 元素，而不论 em 的嵌套层次多深。因此，ul em 将会选择以下标记中的所有 em 元素	http://www.w3school.com.cn/css/css_selector_descendant.asp
前端开发基础	CSS	CSS选择器	CSS 子元素选择器	选择子元素语法解释结合后代选择器和子选择器	选择子元素语法解释结合后代选择器和子选择器	子选择器使用了大于号（子结合符）子结合符两边可以有空白符	http://www.w3school.com.cn/css/css_selector_child.asp
前端开发基础	CSS	CSS选择器	CSS 相邻兄弟选择器	相邻兄弟语法解释结合其他选择器	相邻兄弟语法解释结合其他选择器	相邻兄弟选择器使用了加号（+），即相邻兄弟结合符与子结合符一样，相邻兄弟结合符旁边可以有空白符	http://www.w3school.com.cn/css/css_selector_adjacent_sibling.asp
前端开发基础	CSS3	CSS3 教程	CSS3 教程	了解什么是CSS3	了解什么是CSS3	了解CSS3新加特性	http://www.w3school.com.cn/css3/index.asp
前端开发基础	CSS3	CSS3 简介	CSS3 简介	了解CSS3的模块和标准	了解CSS3的模块和标准	了解CSS3各模块是怎么使用的，最后根据项目进行综合练习	http://www.w3school.com.cn/css3/css3_intro.asp
前端开发基础	CSS3	CSS3 边框	CSS3 边框	CSS3 边框CSS3 圆角边框CSS3 边框阴影CSS3 边框图片	CSS3 边框CSS3 圆角边框CSS3 边框阴影CSS3 边框图片	先了解边框的使用方式，在此基础上一点一点的增加对应的圆角和阴影效果	http://www.w3school.com.cn/css3/css3_border.asp
前端开发基础	CSS3	CSS3 背景	CSS3 背景	CSS3 背景CSS3 background-size 属性CSS3 background-origin 属性CSS3 多重背景图片	CSS3 背景CSS3 background-size 属性CSS3 background-origin 属性CSS3 多重背景图片	根据界面背景显示的信息，添加不同的属性看其显示效果是怎样的	http://www.w3school.com.cn/css3/css3_background.asp
前端开发基础	CSS3	CSS3 文本效果	CSS3 文本效果	CSS3 文本效果CSS3 文本阴影CSS3 自动换行	CSS3 文本效果CSS3 文本阴影CSS3 自动换行	结合边框阴影一起学习	http://www.w3school.com.cn/css3/css3_text_effect.asp
前端开发基础	CSS3	CSS3 字体	CSS3 字体	CSS3 @font-face 规则使用您需要的字体使用粗体字体CSS3 字体描述符	CSS3 @font-face 规则使用您需要的字体使用粗体字体CSS3 字体描述符	修改字体的效果，根据属性不同增加不同的界面效果进行显示	http://www.w3school.com.cn/css3/css3_font.asp
前端开发基础	CSS3	CSS3 2D 转换	CSS3 2D 转换	CSS3 转换 2D 转换translate() 方法rotate() 方法scale() 方法skew() 方法matrix() 方法 2D Transform 方法	CSS3 转换 2D 转换translate() 方法rotate() 方法scale() 方法skew() 方法matrix() 方法 2D Transform 方法	理解什么情况下是2D环境应该使用什么样的样式属性实现2D环境下的界面显示。	http://www.w3school.com.cn/css3/css3_2dtransform.asp
前端开发基础	CSS3	CSS3 3D 转换	CSS3 3D 转换	3D 转换 rotateX() 方法rotateY() 旋转 2D Transform 方法	3D 转换 rotateX() 方法rotateY() 旋转 2D Transform 方法	理解什么情况下是3D环境，3D环境对应的保护区域是怎么样的？如何实现3D环境下的界面显示和属性的使用。	http://www.w3school.com.cn/css3/css3_3dtransform.asp
前端开发基础	CSS3	CSS3 过渡	CSS3 过渡	过渡属性	过渡属性	理解过渡属性的使用方式，结合api理解过渡出发的场景都有哪些	http://www.w3school.com.cn/css3/css3_transition.asp
前端开发基础	CSS3	CSS3 动画	CSS3 动画	CSS3 动画CSS3动画属性	CSS3 动画CSS3动画属性	动画使用会结合过渡效果进行，什么时间使用动画什么时间使用过渡显示动画需要理解并分清楚。	http://www.w3school.com.cn/css3/css3_animation.asp
前端开发基础	CSS3	CSS3 多列	CSS3 多列	CSS3 多列CSS3 创建多列CSS3 规定列之间的间隔CSS3 列规则	CSS3 多列CSS3 创建多列CSS3 规定列之间的间隔CSS3 列规则	控制文字显示列数，结合真实的代码增加不同的属性查看对应的效果	http://www.w3school.com.cn/css3/css3_multiple_columns.asp
前端开发基础	CSS3	CSS3 用户界面	CSS3 用户界面	CSS3 用户界面CSS3 ResizingCSS3 Box SizingCSS3 Outline Offset	CSS3 用户界面CSS3 ResizingCSS3 Box SizingCSS3 Outline Offset	理解盒子模型的定义结合盒子模型理解CSS用户界面属性的使用	http://www.w3school.com.cn/css3/css3_user_interface.asp
前端开发基础	CSS3	CSS 打印	CSS 打印	page-break-after 、page-break-before 、page-break-inside  	page-break-after 、page-break-before 、page-break-inside  	知道每个属性是干什么用的	http://www.w3school.com.cn/css/css_ref_print.asp
前端开发基础	CSS3	CSS 听觉	CSS 听觉	听觉样式表、CSS2 听觉参考	听觉样式表、CSS2 听觉参考	知道每个属性是干什么用的	http://www.w3school.com.cn/css/css_ref_aural.asp
前端开发基础	CSS3	CSS 单位	CSS 单位	%、in、cm、mm、em、ex、pt、pc、px	%、in、cm、mm、em、ex、pt、pc、px	熟悉每种单位的原理再应用到界面开发中	http://www.w3school.com.cn/css/css_units.asp
前端开发基础	CSS3	CSS 颜色值	CSS 颜色值	十六进制色RGB 颜色RGBA 颜色HSL 颜色HSLA 颜色预定义/跨浏览器颜色名	十六进制色RGB 颜色RGBA 颜色HSL 颜色HSLA 颜色预定义/跨浏览器颜色名	能熟练使用一种或两种颜色设置方法，再举一反三使用其他的颜色设置方式设置页面显示	http://www.w3school.com.cn/css/css_colors_legal.asp
前端开发基础	JavaScript	JavaScript基础	JavaScript 简介	JavaScript 是脚本语言JavaScript：写入 HTML 输出JavaScript：对事件作出反应JavaScript：改变 HTML 内容JavaScript：改变 HTML 样式JavaScript：验证输入	JavaScript：改变 HTML 内容JavaScript：改变 HTML 样式JavaScript：验证输入	JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。	http://www.w3school.com.cn/js/js_intro.asp
前端开发基础	JavaScript	JavaScript基础	JavaScript 使用	JavaScript 函数和事件外部的 JavaScript	JavaScript 函数和事件	HTML 中的脚本必须位于 <script> 与 </script> 标签之间。脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。	http://www.w3school.com.cn/js/js_howto.asp
前端开发基础	JavaScript	JavaScript基础	JavaScript 输出	操作 HTML 元素写到文档输出	操作 HTML 元素	JavaScript 通常用于操作 HTML 元素。	http://www.w3school.com.cn/js/js_shuchu.asp
前端开发基础	JavaScript	JavaScript基础	JavaScript 语句	JavaScript 代码分号 ;JavaScript 代码块	JavaScript 代码块	JavaScript 语句JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。下面的 JavaScript 语句向 id="demo" 的 HTML 元素输出文本 "Hello World"：	http://www.w3school.com.cn/js/js_statements.asp
前端开发基础	JavaScript	JavaScript基本语法	JavaScript 变量	声明（创建） JavaScript 变量	声明（创建） JavaScript 变量	JavaScript 变量与代数一样，JavaScript 变量可用于存放值（比如 x=2）和表达式（比如 z=x+y）。变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。变量必须以字母开头变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）变量名称对大小写敏感（y 和 Y 是不同的变量）	http://www.w3school.com.cn/js/js_variables.asp
前端开发基础	JavaScript	JavaScript基本语法	JavaScript 注释	单行注释以 // 开头多行注释以 /* 开始，以 */ 结尾。	单行注释以 // 开头多行注释以 /* 开始，以 */ 结尾。	JavaScript 注释可用于提高代码的可读性。	http://www.w3school.com.cn/js/js_comments.asp
前端开发基础	JavaScript	JavaScript基本语法	JavaScript 数据类型	字符串、数字、布尔、数组、对象	字符串、数字、布尔、数组、对象	JavaScript 拥有动态类型JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：	http://www.w3school.com.cn/js/js_datatypes.asp
前端开发基础	JavaScript	JavaScript基本语法	JavaScript 运算符	JavaScript 算术运算符JavaScript 赋值运算符	JavaScript 赋值运算符	运算符 = 用于赋值。运算符 + 用于加值。	http://www.w3school.com.cn/js/js_operators.asp
前端开发基础	JavaScript	JavaScript程序结构	JavaScript If...Else 语句	If 语句If...else 语句If...else if...else 语句	If...else 语句If...else if...else 语句	通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。在 JavaScript 中，我们可使用以下条件语句：if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码if...else if....else 语句 - 使用该语句来选择多个代码块之一来执行switch 语句 - 使用该语句来选择多个代码块之一来执行	http://www.w3school.com.cn/js/js_if_else.asp
前端开发基础	JavaScript	JavaScript程序结构	JavaScript Switch 语句	语法default 关键词	default 关键词	首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。	http://www.w3school.com.cn/js/js_switch.asp
前端开发基础	JavaScript	JavaScript程序结构	JavaScript For 循环	For 循环For/In 循环	For 循环	JavaScript 支持不同类型的循环：for - 循环代码块一定的次数for/in - 循环遍历对象的属性while - 当指定的条件为 true 时循环指定的代码块do/while - 同样当指定的条件为 true 时循环指定的代码块	http://www.w3school.com.cn/js/js_loop_for.asp
前端开发基础	JavaScript	JavaScript程序结构	JavaScript While 循环	while 循环do/while 循环	while 循环do/while 循环	只要指定条件为 true，循环就可以一直执行代码。	http://www.w3school.com.cn/js/js_loop_while.asp
前端开发基础	JavaScript	JavaScript程序结构	JavaScript Break 和 Continue 语句	break 语句用于跳出循环continue 用于跳过循环中的一个迭代	break 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）	continue 语句（带有或不带标签引用）只能用在循环中。break 语句（不带标签引用），只能用在循环或 switch 中。	http://www.w3school.com.cn/js/js_break.asp
前端开发基础	JavaScript	JavaScript程序调试	JavaScript 错误 - Throw、Try 和 Catch	try 语句测试代码块的错误catch 语句处理错误throw 语句创建自定义错误	try 语句测试代码块的错误catch 语句处理错误。throw 语句创建自定义错误	错误一定会发生当 JavaScript 引擎执行 JavaScript 代码时，会发生各种错误：可能是语法错误，通常是程序员造成的编码错误或错别字。可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。可能是由于来自服务器或用户的错误输出而导致的错误。	http://www.w3school.com.cn/js/js_errors.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript 对象	JavaScript 中的对象属性和方法创建 JavaScript 对象访问对象的属性访问对象的方法	访问对象的属性访问对象的方法	JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。在 JavaScript 中，对象是拥有属性和方法的数据。	http://www.w3school.com.cn/js/js_obj_intro.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript Number 对象	属性：MAX VALUEMIN VALUENEGATIVE INFINITIVEPOSITIVE INFINITIVENaNprototypeconstructor方法：toExponential()toFixed()toPrecision()toString()valueOf()	NaNprototypeconstructortoString()valueOf()	JavaScript 只有一种数字类型。可以使用也可以不使用小数点来书写数字	http://www.w3school.com.cn/js/js_obj_number.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript 字符串(String)对象	计算字符串的长度为字符串添加样式indexOf() 方法match() 方法如何替换字符串中的字符 - replace()	计算字符串的长度为字符串添加样式indexOf() 方法match() 方法如何替换字符串中的字符 - replace()	字符串对象用于处理已有的字符块	http://www.w3school.com.cn/js/js_obj_string.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript Date（日期）对象	返回当日的日期和时间getTime()setFullYear()toUTCString()getDay()显示一个钟表	返回当日的日期和时间getTime()setFullYear()getDay()	日期对象用于处理日期和时间	http://www.w3school.com.cn/js/js_obj_date.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript Array（数组）对象	创建数组For...In 声明合并两个数组 - concat()用数组的元素组成字符串 - join()文字数组 - sort()数字数组 - sort()	创建数组For...In 声明合并两个数组 - concat()用数组的元素组成字符串 - join()文字数组 - sort()数字数组 - sort()	使用关键词 new 来创建数组对象	http://www.w3school.com.cn/js/js_obj_array.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript Boolean（逻辑）对象	Boolean（逻辑）对象用于将非逻辑值转换为逻辑值（true 或者 false）	如果逻辑对象无初始值或者其值为 0、-0、null、""、false、undefined 或者 NaN，那么对象的值为 false。否则，其值为 true（即使当自变量为字符串 "false" 时）！	关键词 new 来定义 Boolean 对象	http://www.w3school.com.cn/js/js_obj_boolean.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript Math（算数）对象	round()、random()、max()、min()	Math（算数）对象的作用是：执行常见的算数任务	Math 对象提供多种算数值类型和函数。无需在使用这个对象之前对它进行定义	http://www.w3school.com.cn/js/js_obj_math.asp
前端开发基础	JavaScript	JavaScript内置对象	JavaScript RegExp 对象	RegExp 对象有 3 个方法：test()、exec() 以及 compile()	简单的模式可以是一个单独的字符。更复杂的模式包括了更多的字符，并可用于解析、格式检查、替换等等。您可以规定字符串中的检索位置，以及要检索的字符类型，等等	RegExp 对象用于规定在文本中检索的内容	http://www.w3school.com.cn/js/js_obj_regexp.asp
前端开发基础	JavaScript	JavaScript数组	JavaScript Array（数组）对象	创建数组For...In 声明合并两个数组 - concat()用数组的元素组成字符串 - join()文字数组 - sort()数字数组 - sort()	创建数组For...In 声明合并两个数组 - concat()用数组的元素组成字符串 - join()文字数组 - sort()数字数组 - sort()	使用关键词 new 来创建数组对象	http://www.w3school.com.cn/js/js_obj_array.asp
前端开发基础	JavaScript	JavaScript函数	JavaScript 函数	JavaScript 函数语法调用带参数的函数带有返回值的函数	调用带参数的函数带有返回值的函数	函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。	http://www.w3school.com.cn/js/js_functions.asp
前端开发基础	JavaScript	JavaScript函数	ECMAScript 函数概述	什么是函数？如何调用函数？函数如何返回值？	什么是函数？如何调用函数？函数如何返回值？	函数是 ECMAScript 的核心。函数是由这样的方式进行声明的：关键字 function、函数名、一组参数，以及置于括号中的待执行代码	http://www.w3school.com.cn/js/pro_js_functions.asp
前端开发基础	JavaScript	JavaScript函数	ECMAScript arguments 对象	检测参数个数、模拟函数重载	检测参数个数、模拟函数重载	在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。	http://www.w3school.com.cn/js/pro_js_functions_arguments_object.asp
前端开发基础	JavaScript	JavaScript函数	ECMAScript Function 对象（类）	Function 对象（类）、Function 对象的 length 属性、Function 对象的方法	Function 对象（类）、Function 对象的 length 属性、Function 对象的方法	ECMAScript 的函数实际上是功能完整的对象。	http://www.w3school.com.cn/js/pro_js_functions_function_object.asp
前端开发基础	JavaScript	JavaScript函数	ECMAScript 闭包（closure）	简单的闭包实例、复杂的闭包实例	就像使用任何高级函数一样，使用闭包要小心，因为它们可能会变得非常复杂。	ECMAScript 最易让人误解的一点是，它支持闭包（closure）。闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。	http://www.w3school.com.cn/js/pro_js_functions_closures.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 面向对象技术	对象、类、实例、对象的构成	对象、类、实例、对象的构成	一种面向对象语言需要向开发者提供四种基本能力：封装 - 把相关的信息（无论数据或方法）存储在对象中的能力聚集 - 把一个对象存储在另一个对象内的能力继承 - 由另一个类（或多个类）得来类的属性和方法的能力多态 - 编写能以多种方法运行的函数或方法的能力	http://www.w3school.com.cn/js/pro_js_object_oriented.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 对象应用	声明和实例化、对象引用	声明和实例化、对象引用	对象的创建和销毁都在 JavaScript 执行过程中发生，理解这种范式的含义对理解整个语言至关重要	http://www.w3school.com.cn/js/pro_js_object_working_with.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 对象作用域	公用、私有和受保护作用域静态作用域 this	this	作用域指的是变量的适用范围	http://www.w3school.com.cn/js/pro_js_object_scope.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 对象类型	对象有三种：本地对象、内置对象和宿主对象	对象有三种：本地对象、内置对象和宿主对象	在 ECMAScript 中，所有对象并非同等创建的	http://www.w3school.com.cn/js/pro_js_object_types.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 定义类或对象	工厂方式构造函数方式原型方式混合的构造函数/原型方式混合工厂方式	工厂方式构造函数方式原型方式	使用预定义对象只是面向对象语言的能力的一部分，它真正强大之处在于能够创建自己专用的类和对象。ECMAScript 拥有很多创建对象或类的方法	http://www.w3school.com.cn/js/pro_js_object_defining.asp
前端开发基础	JavaScript	JavaScript面向对象	ECMAScript 修改对象	创建新方法、重定义已有方法	创建新方法、重定义已有方法	通过使用 ECMAScript，不仅可以创建对象，还可以修改已有对象的行为。prototype 属性不仅可以定义构造函数的属性和方法，还可以为本地对象添加属性和方法。	http://www.w3school.com.cn/js/pro_js_object_modifying.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Window - 浏览器对象模型	Window 对象、Window 尺寸、其他 Window 方法	全局变量是 window 对象的属性。全局函数是 window 对象的方法。	浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器“对话”。	http://www.w3school.com.cn/js/js_window.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Window Screen	Window Screen 可用宽度Window Screen 可用高度	window.screen 对象在编写时可以不使用 window 这个前缀。	window.screen 对象包含有关用户屏幕的信息。	http://www.w3school.com.cn/js/js_window_screen.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Window Location	Window Location、Window Location Href、Window Location Pathname、Window Location Assign	window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。	window.location 对象在编写时可不使用 window 这个前缀。	http://www.w3school.com.cn/js/js_window_location.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Window History	Window History Back、Window History Forward、	history.back() - 与在浏览器点击后退按钮相同history.forward() - 与在浏览器中点击按钮向前相同	window.history 对象包含浏览器的历史。	http://www.w3school.com.cn/js/js_window_history.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Window Navigator	Window Navigator	window.navigator 对象包含有关访问者浏览器的信息。	window.navigator 对象在编写时可不使用 window 这个前缀。	http://www.w3school.com.cn/js/js_window_navigator.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript 消息框	可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。	可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。	可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。	http://www.w3school.com.cn/js/js_popup.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript 计时	setTimeout()、clearTimeout()、	setTimeout()、clearTimeout()、	通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。	http://www.w3school.com.cn/js/js_timing.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript Cookies	什么是cookie?创建和存储 cookie	创建和存储 cookie	cookie 用来识别用户。	http://www.w3school.com.cn/js/js_cookies.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	JavaScript HTML DOM	查找 HTML 元素、通过 id 查找 HTML 元素通过标签名查找 HTML 元素、	当网页被加载时，浏览器会创建页面的文档对象模型	通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。	http://www.w3school.com.cn/js/js_htmldom.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	HTML DOM	HTML DOM （文档对象模型）	HTML DOM （文档对象模型）	当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。HTML DOM 模型被构造为对象的树。	http://www.w3school.com.cn/js/js_htmldom.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	HTML DOM - 改变 HTML	改变 HTML 输出流改变 HTML 内容改变 HTML 属性	改变 HTML 内容改变 HTML 属性	HTML DOM 允许 JavaScript 改变 HTML 元素的内容。	http://www.w3school.com.cn/js/js_htmldom_html.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	HTML DOM - 改变 CSS	改变 HTML 样式	改变 HTML 样式	HTML DOM 允许 JavaScript 改变 HTML 元素的样式。	http://www.w3school.com.cn/js/js_htmldom_css.asp
前端开发基础	JavaScript	JavaScript操作BOM&DOM	HTML DOM 事件	HTML 事件属性使用 HTML DOM 来分配事件onload 和 onunload 事件	HTML 事件属性	HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。	http://www.w3school.com.cn/js/js_htmldom_events.asp
前端开发基础	JavaScript	DOM—节点操作	HTML DOM 节点	节点父、子和同胞	父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）。	在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML。	http://www.w3school.com.cn/htmldom/dom_nodes.asp
前端开发基础	JavaScript	DOM—节点操作	HTML DOM 方法	getElementById(id) - 获取带有指定 id 的节点（元素）appendChild(node) - 插入新的子节点（元素）removeChild(node) - 删除子节点（元素）innerHTML - 节点（元素）的文本值parentNode - 节点（元素）的父节点childNodes - 节点（元素）的子节点attributes - 节点（元素）的属性节点	getElementById(id) - 获取带有指定 id 的节点（元素）appendChild(node) - 插入新的子节点（元素）removeChild(node) - 删除子节点（元素）innerHTML - 节点（元素）的文本值parentNode - 节点（元素）的父节点childNodes - 节点（元素）的子节点attributes - 节点（元素）的属性节点	现实生活中的对象某个人是一个对象。人的方法可能是 eat(), sleep(), work(), play() 等等。所有人都有这些方法，但会在不同时间执行它们。一个人的属性包括姓名、身高、体重、年龄、性别等等。所有人都有这些属性，但它们的值因人而异。	http://www.w3school.com.cn/htmldom/dom_methods.asp
前端开发基础	JavaScript	DOM—节点操作	HTML DOM 属性	innerHTML 属性、nodeName 属性、nodeValue 属性、获取元素的值、nodeType 属性	innerHTML 属性、nodeName 属性、nodeValue 属性、获取元素的值、nodeType 属性	属性是节点（HTML 元素）的值，您能够获取或设置。	http://www.w3school.com.cn/htmldom/dom_properties.asp
前端开发基础	JavaScript	DOM—节点操作	HTML DOM - 元素	创建新的 HTML 元素 - appendChild()创建新的 HTML 元素 - insertBefore()删除已有的 HTML 元素替换 HTML 元素	创建新的 HTML 元素 - appendChild()创建新的 HTML 元素 - insertBefore()删除已有的 HTML 元素替换 HTML 元素	添加、删除和替换 HTML 元素。	http://www.w3school.com.cn/htmldom/dom_elements.asp
前端开发基础	JavaScript	DOM—节点操作	HTML DOM - 导航	HTML DOM 节点列表HTML DOM 节点列表长度导航节点关系DOM 根节点childNodes 和 nodeValue	length、parentNode、firstChild 以及 lastChild 、document.documentElement - 全部文档document.body - 文档的主体实例	通过 HTML DOM，您能够使用节点关系在节点树中导航。	http://www.w3school.com.cn/htmldom/dom_navigation.asp
前端开发基础	JavaScript	JavaScript事件	HTML DOM - 事件	onload 和 onunload 事件、onmouseover 和 onmouseout 事件、onchange 事件、	当用户点击鼠标时当网页已加载时当图片已加载时当鼠标移动到元素上时当输入字段被改变时当 HTML 表单被提交时当用户触发按键时	HTML DOM 允许 JavaScript 对 HTML 事件作出反应。	http://www.w3school.com.cn/htmldom/dom_events.asp
前端开发基础	JavaScript	JavaScript事件	HTML DOM Event 对象	Event 对象事件句柄　(Event Handlers)鼠标 / 键盘属性IE 属性标准 Event 属性标准 Event 方法	Event 对象	Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。	http://www.w3school.com.cn/jsref/dom_obj_event.asp
前端开发基础	JavaScript	正则表达式&表单验证	JavaScript RegExp 对象	RegExp 对象创建方法、修饰符、元字符、表达式、RegExp 对象方法、支持正则表达式的 String 对象的方法	RegExp 对象创建方法、修饰符、元字符、表达式、RegExp 对象方法、支持正则表达式的 String 对象的方法	RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。	http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp
前端开发基础	JavaScript	cookie和Ajax	JavaScript Cookies	什么是cookie?创建和存储 cookie	创建和存储 cookie	cookie 用来识别用户。	http://www.w3school.com.cn/js/js_cookies.asp
前端开发基础	JavaScript	cookie和Ajax	AJAX - 创建 XMLHttpRequest 对象	创建 XMLHttpRequest 对象语法	new XMLHttpRequest();new ActiveXObject("Microsoft.XMLHTTP");	XMLHttpRequest 是 AJAX 的基础。	http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_create.asp
前端开发基础	JavaScript	cookie和Ajax	AJAX - 向服务器发送请求	open() 和 send() 、GET 和 POST	GET 和 POST区别	XMLHttpRequest 对象用于和服务器交换数据。	http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp
前端开发基础	JavaScript	cookie和Ajax	AJAX - 服务器响应	responseText 属性	responseText 属性	如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。	http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_response.asp
前端开发基础	JavaScript	cookie和Ajax	AJAX - onreadystatechange 事件	onreadystatechange 事件使用 Callback 函数	onreadystatechange、readyState、status	当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。	http://www.w3school.com.cn/ajax/ajax_xmlhttprequest_onreadystatechange.asp
前端开发基础	jQuery	jQuery基础	jQuery 简介	jQuery 库包含以下特性：HTML 元素选取HTML 元素操作CSS 操作HTML 事件函数	HTML 元素选取HTML 元素操作CSS 操作	jQuery 库可以通过一行简单的标记被添加到网页中。	http://www.w3school.com.cn/jquery/jquery_intro.asp
前端开发基础	jQuery	jQuery基础	jQuery 安装	把 jQuery 添加到您的网页下载 jQuery	把 jQuery 添加到您的网页	如需使用 jQuery，您需要下载 jQuery 库（会在下面为您讲解），然后把它包含在希望使用的网页中。jQuery 库是一个 JavaScript 文件，您可以使用 HTML 的 <script> 标签引用它：	http://www.w3school.com.cn/jquery/jquery_install.asp
前端开发基础	jQuery	jQuery基础	jQuery 语法	基础语法是：$(selector).action()美元符号定义 jQuery选择符（selector）“查询”和“查找” HTML 元素jQuery 的 action() 执行对元素的操作	基础语法是：$(selector).action()美元符号定义 jQuery选择符（selector）“查询”和“查找” HTML 元素jQuery 的 action() 执行对元素的操作	通过 jQuery，您可以选取（查询，query） HTML 元素，并对它们执行“操作”（actions）。	http://www.w3school.com.cn/jquery/jquery_syntax.asp
前端开发基础	jQuery	jQuery选择器	jQuery 选择器	元素选择器属性选择器CSS 选择器	属性选择器CSS 选择器	jQuery 选择器在前面的章节中，我们展示了一些有关如何选取 HTML 元素的实例。关键点是学习 jQuery 选择器是如何准确地选取您希望应用效果的元素。jQuery 元素选择器和属性选择器允许您通过标签名、属性名或内容对 HTML 元素进行选择。选择器允许您对 HTML 元素组或单个元素进行操作。在 HTML DOM 术语中：选择器允许您对 DOM 元素组或单个 DOM 节点进行操作。	http://www.w3school.com.cn/jquery/jquery_selectors.asp
前端开发基础	jQuery	jQuery基础	jQuery 事件	jQuery 事件	jQuery 事件	jQuery 事件函数jQuery 事件处理方法是 jQuery 中的核心函数。事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。术语由事件“触发”（或“激发”）经常会被使用。通常会把 jQuery 代码放到 <head>部分的事件处理方法中	http://www.w3school.com.cn/jquery/jquery_events.asp
前端开发基础	jQuery	jQuery动画	隐藏和显示	hide() 和 show()toggle()	toggle()	隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦！	http://www.w3school.com.cn/jquery/jquery_hide_show.asp
前端开发基础	jQuery	jQuery动画	淡入淡出	fadeIn() 方法 fadeOut() 方法fadeToggle() 方法	fadeIn() 方法 fadeOut() 方法	通过 jQuery，您可以实现元素的淡入淡出效果。	http://www.w3school.com.cn/jquery/jquery_fade.asp
前端开发基础	jQuery	jQuery动画	滑动	slideDown() 方法slideUp() 方法slideToggle() 方法	slideDown() 方法slideUp() 方法	jQuery 滑动方法可使元素上下滑动。	http://www.w3school.com.cn/jquery/jquery_slide.asp
前端开发基础	jQuery	jQuery动画	动画	animate() 方法	animate() 方法animate() - 操作多个属性	jQuery animate() 方法允许您创建自定义的动画。	http://www.w3school.com.cn/jquery/jquery_animate.asp
前端开发基础	jQuery	jQuery动画	停止动画	stop() 方法	jQuery stop() 滑动jQuery stop() 动画（带有参数）	stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画	http://www.w3school.com.cn/jquery/jquery_stop.asp
前端开发基础	jQuery	jQuery中的DOM操作	获得内容和属性	jQuery 中非常重要的部分，就是操作 DOM 的能力	获得内容 - text()、html() 以及 val()获取属性 - attr()	通过具体方法的演示，找到不同方法的区别，然后不同的场景去确定使用哪种方法来操作DOM	http://www.w3school.com.cn/jquery/jquery_dom_get.asp
前端开发基础	jQuery	jQuery中的DOM操作	设置内容和属性	设置内容设置属性	设置内容 - text()、html() 以及 val()设置属性 - attr()	通过设置内容、设置属性的方法，一定先了解各个方法的具体使用以及方法之间的区别点	http://www.w3school.com.cn/jquery/jquery_dom_set.asp
前端开发基础	jQuery	jQuery中的DOM操作	添加元素	添加元素的方法	append()、prepend()、after()、before()	在具体的场景下，使用jQuery添加元素用的还是比较多的，例如append()、after（）等	http://www.w3school.com.cn/jquery/jquery_dom_add.asp
前端开发基础	jQuery	jQuery中的DOM操作	删除元素	通过 jQuery，可以很容易地删除已有的 HTML 元素	remove() - 删除被选元素（及其子元素）、empty() - 从被选元素中删除子元素	在动态操作DOM元素的时候，删除DOM节点也经常遇到，使用之前，一定分清两种方法的区别；	http://www.w3school.com.cn/jquery/jquery_dom_remove.asp
前端开发基础	jQuery	jQuery中的DOM操作	获取并设置 CSS 类	通过 jQuery，可以很容易地对 CSS 元素的类进行操作	添加类、删除类、切换类	添加、删除、切换类在具体jQuery操作中比较常见，各种操作方法要重点掌握	http://www.w3school.com.cn/jquery/jquery_css_classes.asp
前端开发基础	jQuery	jQuery中的DOM操作	css() 方法	css() 方法设置或返回被选元素的一个或多个样式属性	利用css（）设置一个或多个样式属性	利用css（）设置一个或多个样式属性的区别点	http://www.w3school.com.cn/jquery/jquery_css.asp
前端开发基础	jQuery	jQuery中的DOM操作	jquery尺寸	通过 jQuery，很容易处理元素和浏览器窗口的尺寸	width()height()innerWidth()innerHeight()outerWidth()outerHeight()	在具体的使用场景里面，区别各种类似方法	http://www.w3school.com.cn/jquery/jquery_dimensions.asp
前端开发基础	jQuery	jQuery 遍历	jQuery 遍历	什么是遍历？	什么是遍历？	jQuery 遍历，意为“移动”，用于根据其相对于其他元素的关系来“查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。	http://www.w3school.com.cn/jquery/jquery_traversing.asp
前端开发基础	jQuery	jQuery 遍历	jQuery 遍历 - 祖先	parent()parents()parentsUntil()	parent()parents()	祖先是父、祖父或曾祖父等等。通过 jQuery，您能够向上遍历 DOM 树，以查找元素的祖先。	http://www.w3school.com.cn/jquery/jquery_traversing_ancestors.asp
前端开发基础	jQuery	jQuery 遍历	jQuery 遍历 - 后代	children()find()	children()find()	后代是子、孙、曾孙等等。通过 jQuery，您能够向下遍历 DOM 树，以查找元素的后代。	http://www.w3school.com.cn/jquery/jquery_traversing_descendants.asp
前端开发基础	jQuery	jQuery 遍历	jQuery 遍历 - 同胞	siblings()next()nextAll()nextUntil()prev()prevAll()prevUntil()	prevAll()prevUntil()	同胞拥有相同的父元素。通过 jQuery，您能够在 DOM 树中遍历元素的同胞元素。	http://www.w3school.com.cn/jquery/jquery_traversing_siblings.asp
前端开发基础	jQuery	jQuery 遍历	jQuery 遍历 - 过滤	first(), last() 和 eq()	first(), last() 和 eq()	缩写搜索元素的范围三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。其他过滤方法，比如 filter() 和 not() 允许您选取匹配或不匹配某项指定标准的元素。	http://www.w3school.com.cn/jquery/jquery_traversing_filtering.asp
前端开发基础	jQuery	实现Ajax应用	AJAX 简介	什么是AJAX	AJAX 原理	是什么，为什么，怎么样的一个过程去学习ajax，可以更快的学习	http://www.w3school.com.cn/jquery/jquery_ajax_intro.asp
前端开发基础	jQuery	实现Ajax应用	AJAX load() 方法	load() 方法从服务器加载数据，并把返回的数据放入被选元素中。	load() 方法具体使用和参数配置	jQuery load() 方法是简单但强大的 AJAX 方法，load() 方法的具体使用一定重点看清楚以及其中的参数配置	http://www.w3school.com.cn/jquery/jquery_ajax_load.asp
前端开发基础	jQuery	实现Ajax应用	get() 和 post() 方法	get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据	$.get()、$.post()方法具体使用和参数配置	了解两种方法的使用以及其中区别	http://www.w3school.com.cn/jquery/jquery_ajax_get_post.asp
前端开发基础	jQuery	jQuery应用	noConflict() 方法	同时使用 jQuery 和其他框架	$ 符号以及造成冲突的解决方案	不同框架引入之后，造成冲突的点的定位，找到问题去解决问题	http://www.w3school.com.cn/jquery/jquery_noconflict.asp
前端开发基础	Bootstrap	Bootstrap的基本概念	Bootstrap的基本概念	12栅格\响应式开发	12栅格&重置样式表和启用响应式	理解bootstrap的基本概念,项目目录\基本模板\12栅格系统	http://blog.csdn.net/qq20004604/article/details/52549285
前端开发基础	bootstrap	Bootstrap的基本概念	bootstrap的下载文件	bootstrap的下载文件	理解中文文档1\2\3的区别 与不足	简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。	https://v3.bootcss.com/
前端开发基础	bootstrap	Bootstrap的基本概念	Bootstrap引入的基本结构	项目结构与页面规划	理解项目结构的重要性	理解企业项目结构跟项目规划	http://blog.csdn.net/express_yourself/article/details/54603605
前端开发基础	bootstrap	Bootstrap的全局css样式	Bootstrap的全局css样式	使用栅格进行网页布局	理解栅格系统布局的设计原理	理解 行 row. 列 Column.容器container的区别	https://v3.bootcss.com/css/#grid
前端开发基础	bootstrap	Bootstrap全局css样式	Bootstrap基础排版	页面主体\地址引用列表	列表与搜略语	深入理解列表跟文本元素等等	https://v3.bootcss.com/css/#type
前端开发基础	bootstrap	Bootstrap全局CSS样式	Bootstrap表单的使用	内联表单\水平排列的表单\被支持的控件	焦点状态\校验状态\控件尺寸	理解控件 的使用与原理	https://v3.bootcss.com/css/#forms
前端开发基础	bootstrap	Bootstrap全局CSS样式	Bootstrap按钮的使用	可作为按钮使用的标签或元素	可作为按钮使用的标签或元素\定义状态\激活状态	理解不同元素或标签\禁用与激活的原理	https://v3.bootcss.com/css/#buttons
前端开发基础	bootstrap	Bootstrap全局CSS样式	Bootstrap图片的使用	响应式图片	响应式图片的定义	理解响应式布局下的响应式图片的原理	https://v3.bootcss.com/css/#images
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap图标组件的使用	理解Glyphicons Halflings图标的使用	Glyphicons Halflings图标的	Glyphicons Halflings图标的使用	https://v3.bootcss.com/components/
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap下拉菜单组件的使用	实例\对齐	标题禁用菜单项	下拉菜单&按钮组\单选框的运用	https://v3.bootcss.com/components/#dropdowns
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap按钮组件的使用	基本实例的运用	按钮工具栏\嵌套\对齐排列的按钮组	理解按钮的运用原理	https://v3.bootcss.com/components/#btn-groups
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap下拉按钮菜单组件的使用	单组件下拉按钮菜单的使用	向上向下的按钮下拉菜单	分列式按钮下拉菜单	https://v3.bootcss.com/components/#btn-dropdowns
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap输入框组件的使用	多选框&单选框	Multiple buttons\多选框&单选框 下拉菜单	输入框的混用与嵌套	https://v3.bootcss.com/components/#input-groups
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap导航组件的使用	胶囊式导航\禁用链接	添加下拉菜单.对齐的导航组件	导航组件的运用都是依赖.nav类	https://v3.bootcss.com/components/#nav
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap缩略图组件的使用	默认样式	自定义缩略图	通过栅格来实现缩略图的运用	https://v3.bootcss.com/components/#thumbnails
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap媒体对象组件的使用	默认样式	媒体对象列表	通过内容块来展示媒体对象列表	https://v3.bootcss.com/components/#media
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap列表组组件的使用	徽章\链接	徽章\条目\定制内容	通过基本实例来展现列表的效果	https://v3.bootcss.com/components/#list-group-buttons
前端开发基础	bootstrap	Bootstrap CSS组件	Bootstrap进度条组件的使用	有提示的进度条\根据情景表换的效果	条纹\动画\堆叠效果	通过基本实例与带有提示的进度条来实现更多的效果	https://v3.bootcss.com/components/#progress
前端开发基础	bootstrap	Bootstrap javascript插件	Bootstrap动画过渡插件的使用	引入transition.js	transitionEnd事件	引入transition.js	https://v3.bootcss.com/javascript/#transitions
前端开发基础	bootstrap	Bootstrap javascript插件	Bootstrap模态弹框插件的使用	Using the grid system	data 属性 id myModal	通过方法引入参数事件来实现模态框的效果	https://v3.bootcss.com/javascript/#modals
前端开发基础	bootstrap	Bootstrap javascript插件	Bootstrap选项卡插件的使用	用法\方法	Tooltips.js Example tabs	通过文档及实例来实现	https://v3.bootcss.com/javascript/#tabs-events
前端开发基础	bootstrap	Bootstrap javascript插件	Bootstrap旋转轮播插件的使用	 方法 参数 实例	方法  参数  事件	通过文档及实例来实现	https://v3.bootcss.com/javascript/#carousel
前端开发基础	bootstrap	Bootstrap javascript插件	Bootstrap中折叠插件的应用	Accordion example	.panel-body .list-group	通过文档及实例来实现	https://v3.bootcss.com/javascript/#collapse
前端高级开发	ES6	初识ECMAScript 6	ECMAScript 6简介	了解ECMAScript和JavaScript关系了解ES6的发展史了解什么是ES6	Babel 转码器	了解ECMAScript和JavaScript关系了解ES6的发展史了解什么是ES6了解现在开发中如何转义ES6	http://es6.ruanyifeng.com/#docs/intro
前端高级开发	ES6	ES6基础	let 和 const 命令	let命令const命令	let命令const命令	结合之前JavaScript中的变量生命字符var 进行学习，了解什么是块级作用域、暂时性死区等概念	http://es6.ruanyifeng.com/#docs/let
前端高级开发	ES6	ES6基础	变量的解构赋值	数组的解构赋值对象的解构赋值字符串的解构赋值数值和布尔值的解构赋值函数参数的解构赋值圆括号问题用途	数组的解构赋值对象的解构赋值字符串的解构赋值数值和布尔值的解构赋值函数参数的解构赋值圆括号问题用途	先了解界面的	http://es6.ruanyifeng.com/#docs/destructuring
前端高级开发	ES6	ES6基础	字符串的扩展	字符的 Unicode 表示法codePointAt()String.fromCodePoint()字符串的遍历器接口at()normalize()includes(), startsWith(), endsWith()repeat()padStart()，padEnd()matchAll()模板字符串实例：模板编译标签模板String.raw()模板字符串的限制	字符的 Unicode 表示法codePointAt()String.fromCodePoint()字符串的遍历器接口at()normalize()includes(), startsWith(), endsWith()repeat()padStart()，padEnd()matchAll()模板字符串实例：模板编译标签模板String.raw()模板字符串的限制	结合已经学习的字符串知识进行学习，体会字符串新加的属性和方法在我们工作中如何提高开发效率	http://es6.ruanyifeng.com/#docs/string
前端高级开发	ES6	ES6基础	正则的扩展	RegExp 构造函数字符串的正则方法u 修饰符y 修饰符sticky 属性flags 属性s 修饰符：dotAll 模式后行断言Unicode 属性类具名组匹配	RegExp 构造函数字符串的正则方法u 修饰符y 修饰符sticky 属性flags 属性s 修饰符：dotAll 模式后行断言Unicode 属性类具名组匹配	结合之前的正则表达式的使用方式和方法，去对比现在增加的接口和方法提供了怎样的功能对比进行学习	http://es6.ruanyifeng.com/#docs/regex
前端高级开发	ES6	ES6基础	数值的扩展	二进制和八进制表示法Number.isFinite(), Number.isNaN()Number.parseInt(), Number.parseFloat()Number.isInteger()Number.EPSILON安全整数和 Number.isSafeInteger()Math 对象的扩展Math.signbit()指数运算符Integer 数据类型	二进制和八进制表示法Number.isFinite(), Number.isNaN()Number.parseInt(), Number.parseFloat()Number.isInteger()Number.EPSILON安全整数和 Number.isSafeInteger()Math 对象的扩展Math.signbit()指数运算符Integer 数据类型	针对于数值增加了一些方法，这些方法是如何使用的，解决了怎样的问题，通过问题去记忆和学习	http://es6.ruanyifeng.com/#docs/number
前端高级开发	ES6	ES6基础	函数的扩展	函数参数的默认值rest 参数严格模式name 属性箭头函数双冒号运算符尾调用优化函数参数的尾逗号	函数参数的默认值rest 参数严格模式name 属性箭头函数双冒号运算符尾调用优化函数参数的尾逗号	函数这块使用了箭头函数和rest参数，这些跟之前的function有什么区别，箭头函数解决了怎样的问题，我们如何实现更方便。	http://es6.ruanyifeng.com/#docs/function
前端高级开发	ES6	ES6基础	数组的扩展	扩展运算符Array.from()Array.of()数组实例的 copyWithin()数组实例的 find() 和 findIndex()数组实例的 fill()数组实例的 entries()，keys() 和 values()数组实例的 includes()数组的空位	扩展运算符Array.from()Array.of()数组实例的 copyWithin()数组实例的 find() 和 findIndex()数组实例的 fill()数组实例的 entries()，keys() 和 values()数组实例的 includes()数组的空位	 在原始数组上增加了一些方法的使用，这些方法可以帮助我们解决那些问题，我们将如何灵活的使用这些方法那？	http://es6.ruanyifeng.com/#docs/array
前端高级开发	ES6	ES6基础	对象的扩展	属性的简洁表示法属性名表达式方法的 name 属性Object.is()Object.assign()属性的可枚举性和遍历Object.getOwnPropertyDescriptors()__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()super 关键字Object.keys()，Object.values()，Object.entries()对象的扩展运算符	Object.is()Object.assign()属性的可枚举性和遍历Object.getOwnPropertyDescriptors()__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()super 关键字Object.keys()，Object.values()，Object.entries()对象的扩展运算符	结合之前学习的对象，对比进行学习，结合实际的项目开发的时候遇到的问题进行学习。	http://es6.ruanyifeng.com/#docs/object
前端高级开发	ES6	ES6基础	Symbol	作为属性名的 Symbol实例：消除魔术字符串属性名的遍历Symbol.for()，Symbol.keyFor()实例：模块的 Singleton 模式内置的 Symbol 值	作为属性名的 Symbol实例：消除魔术字符串属性名的遍历Symbol.for()，Symbol.keyFor()实例：模块的 Singleton 模式内置的 Symbol 值	Symbol有什么样的特性，我们将如何创建和使用Symbol。我们可以使用Symbol解决怎样的问题那？	http://es6.ruanyifeng.com/#docs/symbol
前端高级开发	ES6	Set 和 Map 数据结构	Set 和 Map 数据结构	SetWeakSetMapWeakMap	SetWeakSetMapWeakMap	set 和Map 两者有什么特点，并有什么相似的地方拿？跟我们ES5中的Object对象有怎样的区别那？	http://es6.ruanyifeng.com/#docs/set-map
前端高级开发	ES6	Proxy	Proxy	Proxy 实例的方法Proxy.revocable()this 问题实例：Web 服务的客户端	Proxy 实例的方法Proxy.revocable()this 问题实例：Web 服务的客户端	先了解一下代理模式是怎么样的再去理解Proxy如何实现拦截的。	http://es6.ruanyifeng.com/#docs/proxy
前端高级开发	ES6	Reflect	Reflect	静态方法实例：使用 Proxy 实现观察者模式	静态方法实例：使用 Proxy 实现观察者模式	Reflect中文翻译为反射，首先了解一下什么是反射，我们使用反射机制能做什么，再结合文档学习Reflect的使用方式和在项目中是如何进行开发的，Reflect跟Proxy如何结合实现开发。	http://es6.ruanyifeng.com/#docs/reflect
前端高级开发	ES6	Promise 对象	Promise 对象	 Promise.prototype.then()Promise.prototype.catch()Promise.prototype.finally()Promise.all()Promise.race()Promise.resolve()Promise.reject()应用Promise.try()	 Promise.prototype.then()Promise.prototype.catch()Promise.prototype.finally()Promise.all()Promise.race()Promise.resolve()Promise.reject()应用Promise.try()	作为ES6的重点，这块主要实现了异步的回调，如何使用Promise进行数据的回调，如何监听异常操作，使用try、catch抓取代码中的异常和处理界面中产生的异常信息。	http://es6.ruanyifeng.com/#docs/promise
前端高级开发	ES6	Iterator 和 for...of 循环	Iterator 和 for...of 循环	Iterator（遍历器）的概念默认 Iterator 接口调用 Iterator 接口的场合字符串的 Iterator 接口Iterator 接口与 Generator 函数遍历器对象的 return()，throw()for...of 循环	Iterator（遍历器）的概念默认 Iterator 接口调用 Iterator 接口的场合字符串的 Iterator 接口Iterator 接口与 Generator 函数遍历器对象的 return()，throw()for...of 循环	结合之前学习的for..in 、for 等进行学习， 本节中的迭代器类似于我们之前使用的循环遍历，只是使用的方法和属性发生了变化。	http://es6.ruanyifeng.com/#docs/iterator
前端高级开发	ES6	Generator 函数的语法	Generator 函数的语法	 next 方法的参数for...of 循环Generator.prototype.throw()Generator.prototype.return()next()、throw()、return() 的共同点yield* 表达式作为对象属性的 Generator 函数Generator 函数的this 	 next 方法的参数for...of 循环Generator.prototype.throw()Generator.prototype.return()next()、throw()、return() 的共同点yield* 表达式作为对象属性的 Generator 函数Generator 函数的this 	Generator生成器的使用方法和使用特点需要大家注意	http://es6.ruanyifeng.com/#docs/generator
前端高级开发	ES6	Generator 函数的异步应用	Generator 函数的异步应用	 Generator 函数Thunk 函数co 模块	 Generator 函数Thunk 函数co 模块	学习Generator 函数需要结合之前学习的异步请求去了解Generator如何实现界面的异步操作	http://es6.ruanyifeng.com/#docs/generator-async
前端高级开发	ES6	async 函数	async 函数	 async 函数的实现原理与其他异步处理方法的比较实例：按顺序完成异步操作异步遍历器	 async 函数的实现原理与其他异步处理方法的比较实例：按顺序完成异步操作异步遍历器	async 函数作为异步操作函数，我们需要结合Generator、Promise等进行学习和使用。	http://es6.ruanyifeng.com/#docs/async
前端高级开发	ES6	Class 的基本语法	Class 的基本语法	 严格模式constructor 方法类的实例对象Class 表达式不存在变量提升私有方法和私有属性this 的指向name 属性Class 的取值函数（getter）和存值函数（setter）Class 的 Generator 方法Class 的静态方法Class 的静态属性和实例属性new.target 属性	 constructor 方法类的实例对象Class 表达式不存在变量提升私有方法和私有属性this 的指向name 属性Class 的取值函数（getter）和存值函数（setter）Class 的 Generator 方法Class 的静态方法Class 的静态属性和实例属性new.target 属性	Class 的基本语法 在ES5当中时没有类的概念的，我们使用new操作符或者闭包去创建一个对象，可以结合之前学习过的面向对象编程去理解class在ES6中是如何创建和使用的。	http://es6.ruanyifeng.com/#docs/class
前端高级开发	ES6	Class 的继承	Class 的继承	 Object.getPrototypeOf()super 关键字类的 prototype 属性和__proto__属性原生构造函数的继承Mixin 模式的实现	 Object.getPrototypeOf()super 关键字类的 prototype 属性和__proto__属性原生构造函数的继承Mixin 模式的实现	在ES5中实现继承操作我们主要使用原型对象和借用构造函数等方式实现对象的继承，了解在ES6中使用什么方式实现继承，并知道ES6在实现继承后添加了哪些方法和属性提高我们对对象的操作。	http://es6.ruanyifeng.com/#docs/class-extends
前端高级开发	ES6	Decorator	Decorator	类的修饰方法的修饰为什么修饰器不能用于函数？core-decorators.js使用修饰器实现自动发布事件MixinTraitBabel 转码器的支持	类的修饰方法的修饰为什么修饰器不能用于函数？core-decorators.js使用修饰器实现自动发布事件MixinTraitBabel 转码器的支持	Decorator修饰器可以修改类的行为，首先学会其使用方式，再结合实际的操作和使用理解其使用原理	http://es6.ruanyifeng.com/#docs/decorator
前端高级开发	ES6	Module 的语法	Module 的语法	 export 命令import 命令模块的整体加载export default 命令export 与 import 的复合写法模块的继承跨模块常量import()	  模块的整体加载 export 与 import 的复合写法模块的继承跨模块常量import()	结合之前学习的模块化开发进行学习，了解如何实现方法或者属性的抛出和引入，结合模块化的实现方式实现对应的项目开发	http://es6.ruanyifeng.com/#docs/module
前端高级开发	ES6	Module 的加载实现	Module 的加载实现	浏览器加载ES6 模块与 CommonJS 模块的差异Node 加载循环加载ES6 模块的转码	浏览器加载ES6 模块与 CommonJS 模块的差异Node 加载循环加载ES6 模块的转码	结合真实的项目开发去理解模块化的使用方式。	http://es6.ruanyifeng.com/#docs/module-loader
前端高级开发	Vue	初识Vue.js	Vue.js 简介	了解Vue是什么，及特性	基于数据驱动的方式组件式编程	了解Vue是什么，及特性	https://cn.vuejs.org/https://segmentfault.com/a/1190000005914700
前端高级开发	Vue	初识Vue.js	MVVM 框架	了解什么是MVVM	MVVM的实现原理及优缺点	熟悉和了解MVVM的实现原理及实现方式，及MVVM在Vue中的使用	https://baike.baidu.com/item/MVVM/96310?fr=aladdinhttps://www.jianshu.com/p/ea9d556d6529
前端高级开发	Vue	初识Vue.js	Vue.js起步	搭建简单的Vue开发环境	搭建简单的Vue开发环境	学会使用Vue进行环境搭建，实现Hello Vue.js! 界面开发	https://v1-cn.vuejs.org/guide/
前端高级开发	Vue	初识Vue.js	表达式	会使用{{}}表达式进行开发	使用表达式实现界面的数据动态修改	使用{{}} 实现js代码的编写	http://blog.csdn.net/mapbar_front/article/details/71955793
前端高级开发	Vue	Vue.js 指令	常见指令	了解V-*系列指令的使用	v-if、v-for等指令的使用	编写代码理解V-*指令使用的方式，结合JS中if、for等指令的使用方式进行学习	http://www.jb51.net/article/99450.htmhttp://blog.csdn.net/someby/article/details/76235041
前端高级开发	Vue	Vue.js 指令	指令扩展	自定义指令、钩子函数	自定义指令、钩子函数	学习使用Vue中的自定义函数的定义和使用，理解钩子函数在自定义指令中的使用	http://blog.csdn.net/zuoziji416/article/details/53514412
前端高级开发	Vue	Vue.js 交互及实例的生命周期	Vue.js 交互	数据交互数据提交和返回数据的处理	数据交互数据提交和返回数据的处理	使用Vue 实现与后端的数据交互	http://www.jb51.net/article/116640.htm
前端高级开发	Vue	Vue.js 交互及实例的生命周期	过滤器	VueJs中的过滤器基础	自定义过滤器	掌握Vue中基本过滤器的使用方式，并学会使用自定义过滤器进行开发	https://cn.vuejs.org/v2/guide/filters.htmlhttps://www.cnblogs.com/jone-chen/p/5846500.htmlhttps://www.cnblogs.com/chenmeng2062/p/7067123.html
前端高级开发	Vue	Vue.js 交互及实例的生命周期	实例生命周期	boforeCreate   创建之前created            创建之后boforeMount    实例化之前mounted          实例化之后	理解生命周期、钩子函数的使用方式和实现原理	先学会使用Vue的基本周期函数的使用，并试着理解生命周期的原理	https://www.cnblogs.com/goatling/p/6296624.htmlhttps://segmentfault.com/a/1190000008010666
前端高级开发	Vue	Vue.js 交互及实例的生命周期	事件修饰符	掌握事件修饰符的使用	掌握事件修饰符的使用	理解时间修饰符的使用场景和使用方式及事件修饰符的分类	https://www.cnblogs.com/meiyh/p/6593462.htmlhttp://www.jb51.net/article/119570.htmhttp://www.jb51.net/article/119569.htm
前端高级开发	Vue	组件	组件的基本概念	理解什么是组件及组件的定义	组件实现的原理	理解组件的实现方式及设计思想	http://blog.csdn.net/wilesen/article/details/76132355
前端高级开发	Vue	组件	全局组件和局部组件	理解组件的创建和注册	理解组件的创建和注册	理解组件的创建注册使用方式，会实现组件的全局注册和局部注册	https://www.cnblogs.com/zhousen34/p/6210161.htmlhttp://blog.csdn.net/qwezxc24680/article/details/73550131https://www.cnblogs.com/xiaojingyuan/p/6555988.html
前端高级开发	Vue	组件	props选项	props数据传递	props数据传递	使用props实现组件之间的数据传递和方法函数的回调等功能，掌握props的基本使用场景	http://blog.csdn.net/sinat_17775997/article/details/52437962
前端高级开发	Vue	组件	slot槽口	slot实现组件之间的传递	slot实现组件之间的传递	了解slot如何实现标签或组件在组件之间的传递	https://www.cnblogs.com/yesyes/p/6838671.htmlhttp://blog.csdn.net/wangxiaoxiaosen/article/details/75404397
前端高级开发	Vue	组件	父子组件	父子组件实现的方式	父子组件实现的方式	先了解Vue组件开发的原理再理解父子组件的挂在原理和使用方式	http://blog.csdn.net/github_26672553/article/details/52818822
前端高级开发	Vue	组件	自定义事件	实现自定义事件的绑定	实现自定义事件的绑定	先理解Vue中事件的绑定与使用在实现自定义事件的绑定	http://blog.csdn.net/hayre/article/details/60572435http://blog.csdn.net/oak160/article/details/64922390
前端高级开发	Vue	项目环境配置及单文件组件	node+webpack项目环境配置	使用webpack搭建Vue开发环境	使用webpack搭建Vue开发环境	使用webpack 搭建一个开发环境 显现Hello World 界面	http://www.runoob.com/w3cnote/vue2-start-coding.html
前端高级开发	Vue	项目环境配置及单文件组件	单文件组件	单文件组件的创建方式和使用方式	单文件组件的创建方式和使用方式	结合组件的创建方式理解单文件组件的创建和使用	http://blog.csdn.net/yangping227/article/details/77848988
前端高级开发	Vue	路由配置	路由的概述	理解什么是路由	路由的实现原理，路由的配置方式	先理解页面单页面之间是如何实现跳转的，再去理解Vue中路由的使用方式解决了什么问题	http://www.runoob.com/vue2/vue-routing.htmlhttps://router.vuejs.org/zh-cn/http://blog.csdn.net/tanga842428/article/details/54890110
前端高级开发	Vue	路由配置	一级路由配置	掌握一级路由的配置方式	理解一级路由的实现原理	先理解a标签实现页面跳转的方式，在去理解路由中一级路由实现的原理和使用方式	https://www.cnblogs.com/null11/p/7486763.htmlhttp://blog.csdn.net/caoxinhui521/article/details/77688512
前端高级开发	Vue	路由配置	路由的重定向	实现路由的重定向	实现路由的重定向	理解重定向使用的场景，结合场景实现路由重定向功能	https://router.vuejs.org/zh-cn/essentials/redirect-and-alias.htmlhttp://blog.csdn.net/hushilin001/article/details/77863964
前端高级开发	Vue	路由配置	二级路由配置	实现二级路由配置	实现多级路由配置	先理解一级路由的创建及使用方式在结合项目实现多级路由的实现	http://blog.csdn.net/fungleo/article/details/53213167https://jingyan.baidu.com/article/9c69d48f81ce2313c8024e5a.htmlhttp://www.jb51.net/article/116678.htm
前端高级开发	Vue	路由配置	路由传参	路由传参	路由传参	路由传参是为了实现页面之间的数据传递，如何传递数据才能更高效更安全那？	http://blog.csdn.net/github_26672553/article/details/54861608http://www.jb51.net/article/114436.htm
React	React	React 基础介绍	React 教程	React 特点以及优势	React 优势可以解决的问题	带着要解决的问题来学习新的框架	http://www.runoob.com/react/react-tutorial.html
React	React	React 安装	React 安装	React 安装方式	通过 npm 使用 React	学习新的框架之前，最先学习的就是框架的安装，必要的安装方式有必要学习	http://www.runoob.com/react/react-install.html
React	React	React JSX	React JSX	什么是JSX语法、JSX的使用规范	JSX的语法规范记忆具体的使用	React 使用 JSX 来替代常规的 JavaScript，这种写法一定要慢慢熟悉	http://www.runoob.com/react/react-jsx.html
React	React	React 组件	React 组件	React 组件的定义和使用	React 组件的使用	React 组件是React中比较常用的点，可以帮我们解决实际开发中经常要重复的代码，这个部分要	http://www.runoob.com/react/react-components.html
React	React	React State(状态)	React State(状态)	React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致	在React中改变组件的状态是比较重要的，状态值的控制是不叫关键的	React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。	http://www.runoob.com/react/react-state.html
React	React	React Props	React Props	 props 是不可变的，子组件只能通过 props 来传递数据	props和state的区别点、以及使用场景	理解属性的具体使用场景，然后按照固有的使用方式去使用props	http://www.runoob.com/react/react-props.html
React	React	React 组件 API	React 组件 API	设置状态：setState、替换状态：replaceState、设置属性：setProps、替换属性：replaceProps、强制更新：forceUpdate、获取DOM节点：findDOMNode、判断组件挂载状态：isMounted	设置状态：setState、强制更新：forceUpdate等是比较经常用到的	关于组件API的介绍，其中设置状态用的比较多，只要是改变状态的时候都需要使用设置状态去改变	http://www.runoob.com/react/react-component-api.html
React	React	React 组件生命周期	React 组件生命周期	生命周期的方法也被称为钩子函数，在组件特定的时期去做一些相应的操作	componentDidMount，组件挂载完毕，用的比较多	学习之前一定了解，生命周期的具体含义，在每一个生命周期的时候可以进行相关操作	http://www.runoob.com/react/react-component-life-cycle.html
React	React	React AJAX	React AJAX	React框架交互的方法	使用React框架与后台交互是经常用到的，ajax结合react的使用	componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI	http://www.runoob.com/react/react-ajax.html
React	React	React 表单与事件	React 表单与事件	React 中使用表单	设置了输入框 input 值value = {this.state.data}。在输入框值发生变化时我们可以更新 state。	React中表单的使用以及结合表单事件的处理方式、onChange事件	http://www.runoob.com/react/react-forms-events.html
React	React	React Refs	React Refs	React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上	refs的属性的具体使用以及场景	这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。帮助解决相应的问题	http://www.runoob.com/react/react-refs.html
前端高级开发	angular2	typescript概述	TypeScript 入门教程	什么是 TypeScript？语法特性:类 Classes接口 Interfaces模块 Modules 类型注解 Type annotations编译时类型检查 Compile time type checking Arrow 函数 (类似 C# 的 Lambda 表达式)JavaScript 与 TypeScript 的区别TypeScript 安装	语法特性、TypeScript 安装	TypeScript 是一种由微软开发的自由和开源的编程语言，它是JavaScript的一个超集，扩展了JavaScript的语法。	http://www.runoob.com/w3cnote/getting-started-with-typescript.html
前端高级开发	angular2	typescript语法	TypeScript 入门教程	1、接口2、箭头函数表达式（lambda表达式）lambda表达式 ()=>{something}或()=>something 相当于js中的函数,它的好处是可以自动将函数中的this附加到上下文中3、类TypeScript支持集成了可选的类型批注支持的ECMAScript 6的类4、继承继承一个已存在的类并创建一个派生类，继承使用关键字 extends	1、接口2、箭头函数表达式（lambda表达式）lambda表达式 ()=>{something}或()=>something 相当于js中的函数,它的好处是可以自动将函数中的this附加到上下文中3、类TypeScript支持集成了可选的类型批注支持的ECMAScript 6的类4、继承继承一个已存在的类并创建一个派生类，继承使用关键字 extends	1、接口2、箭头函数表达式（lambda表达式）lambda表达式 ()=>{something}或()=>something 相当于js中的函数,它的好处是可以自动将函数中的this附加到上下文中3、类TypeScript支持集成了可选的类型批注支持的ECMAScript 6的类4、继承继承一个已存在的类并创建一个派生类，继承使用关键字 extends更多资料，可参考：http://www.runoob.com/manual/gitbook/TypeScript/_book/	http://www.runoob.com/w3cnote/getting-started-with-typescript.html
前端高级开发	angular2	typescript语法	函数	函数类型、可选参数和默认参数、剩余参数、this、this和箭头函数、this参数、this参数在回调函数里、重载	函数类型、可选参数和默认参数、剩余参数、this、this和箭头函数、this参数、this参数在回调函数里、重载	函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。	http://www.runoob.com/manual/gitbook/TypeScript/_book/doc/handbook/Functions.html
前端高级开发	angular2	typescript语法	变量声明	var 声明作用域规则变量获取怪异之处let 声明块作用域重定义及屏蔽块级作用域变量的获取const 声明let vs. const解构解构数组对象解构属性重命名默认值函数声明	var 声明作用域规则变量获取怪异之处let 声明块作用域重定义及屏蔽块级作用域变量的获取const 声明let vs. const解构解构数组对象解构属性重命名默认值函数声明	let和const是JavaScript里相对较新的变量声明方式。 像我们之前提到过的，let在很多方面与var是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 const是对let的一个增强，它能阻止对一个变量再次赋值。	http://www.runoob.com/manual/gitbook/TypeScript/_book/doc/handbook/Variable%20Declarations.html
前端高级开发	angular2	面向对象	面向对象	类和对象Python类定义	类和对象Python类定义	面向对象	http://www.cnblogs.com/zfc2201/p/8169012.html
前端高级开发	angular2	模块化开发	AngularJS 模块化与依赖注入	模块概念依赖注入Service声明最常见的方式：工厂方法最直接的方式：构造函数最简单的方式：Value/Constant最通用的方式：Provider	模块概念依赖注入	AngularJS使用模块化的组织方式，和依赖注入的设计。这使得模块之间耦合度较低，模块更容易复用	http://blog.csdn.net/helloxiaoliang/article/details/52165099
前端高级开发	angular2	模块化开发	AngularJS 模块化	控制器模块化指令模块化过滤器模块化服务模块化定义值模块化使用模块工作 	控制器模块化指令模块化过滤器模块化服务模块化定义值模块化使用模块工作 	控制器模块化指令模块化过滤器模块化服务模块化定义值模块化使用模块工作 	http://blog.csdn.net/super_yang_android/article/details/51585689
前端高级开发	angular2	ng2环境搭建和概述	Angular 2 JavaScript 环境配置	1、创建配置文件创建目录载入需要的库创建 Angular 组件模块Class定义对象Component 定义对象2、添加 NgModule3、启动应用添加一些样式	1、创建配置文件2、添加 NgModule3、启动应用	 JavaScript 来创建 Angular 的应用，当然你也可以使用 TypeScript 和 Dart 来创建 Angular 应用	http://www.runoob.com/angularjs2/angularjs2-javascript-setup.html
前端高级开发	angular2	路由、组件、常用指令	Angular 2 架构	1、模块 (Modules)2、组件 (Components)3、模板 (Templates)4、元数据 (Metadata)5、数据绑定 (Data Binding)6、指令 (Directives)7、服务 (Services)8、依赖注入 (Dependency Injection)	模块：declarations （声明） - 视图类属于这个模块。 Angular 有三种类型的视图类： 组件 、 指令 和 管道 。exports - 声明（ declaration ）的子集，可用于其它模块中的组件模板 。imports - 本模块组件模板中需要由其它导出类的模块。providers - 服务的创建者。本模块把它们加入全局的服务表中，让它们在应用中的任何部分都可被访问到。bootstrap - 应用的主视图，称为根组件，它是所有其它应用视图的宿主。只有根模块需要设置 bootstrap 属性中。组件(Components)：从 @angular/core 中引入 Component 修饰器建立一个普通的类，并用 @Component 修饰它在 @Component 中，设置 selector 自定义标签，以及 template 模板模板(Templates)：Angular模板的默认语言就是HTML。元数据(Metadata)：元数据告诉 Angular 如何处理一个类。考虑以下情况我们有一个组件叫作 Component ，它是一个类，直到我们告诉 Angular 这是一个组件为止。你可以把元数据附加到这个类上来告诉 Angular Component 是一个组件。在 TypeScript 中，我们用 装饰器 (decorator) 来附加元数据。实例：selector - 一个 css 选择器，它告诉 Angular 在 父级 HTML 中寻找一个 <mylist> 标签，然后创建该组件，并插入此标签中。templateUrl - 组件 HTML 模板的地址。directives - 一个数组，包含 此 模板需要依赖的组件或指令。providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供者。数据绑定(Data binding)：插值 : 在 HTML 标签中显示组件值。属性绑定: 把元素的属性设置为组件中属性的值。事件绑定: 在组件方法名被点击时触发。双向绑: 使用Angular里的NgModel指令可以更便捷的进行双向绑定。指令（Directives）：属性指令：以元素的属性形式来使用的指令。结构指令：用来改变DOM树的结构组件：作为指令的一个重要子类，组件本质上可以看作是一个带有模板的指令。服务(Services)：日志服务数据服务消息总线税款计算器应用程序配置依赖注入：当 Angular 创建组件时，会首先为组件所需的服务找一个注入器（ Injector ） 。注入器是一个维护服务实例的容器，存放着以前创建的实例。如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给 Angular 。当所有的服务都被解析完并返回时， Angular 会以这些服务为参数去调用组件的构造函数。 这就是依赖注入 。	Angular 2 应用程序应用主要由以下 8 个部分组成：1、模块 (Modules)2、组件 (Components)3、模板 (Templates)4、元数据 (Metadata)5、数据绑定 (Data Binding)6、指令 (Directives)7、服务 (Services)8、依赖注入 (Dependency Injection)	http://www.runoob.com/angularjs2/angularjs2-architecture.html
前端高级开发	angular2	路由、组件、常用指令	angular路由详解	ngRoute、ngRoute	ngRoute模块 和 ui.router模块 各自都提供了哪些服务，哪些指令ngRoute$routeProvider(服务提供者) --------- 对应于下面的urlRouterProvider和stateProvider$route(服务) --------- 对应于下面的urlRouter和state$routeParams(服务) --------- 对应于下面的stateParamsng-view(指令) --------- 对应于下面的ui-viewui.router$urlRouterProvider(服务提供者) --------- 用来配置路由重定向$urlRouter(服务)$stateProvider(服务提供者) --------- 用来配置路由$state(服务) --------- 用来显示当前路由状态信息，以及一些路由方法（如：跳转）$stateParams(服务) --------- 用来存储路由匹配时的参数ui-view(指令) --------- 路由模板渲染，对应的dom相关联ui-sref(指令)	路由 (route) ，几乎所有的 MVC(VM) 框架都应该具有的特性，因为它是前端构建单页面应用 (SPA) 必不可少的组成部分。那么，对于 angular 而言，它自然也有 内置 的路由模块：叫做 ngRoute 。不过，大家很少用它，因为它的功能太有限，往往不能满足开发需求！！于是，一个基于 ngRoute 开发的 第三方路由模块 ，叫做 ui.router	http://blog.csdn.net/gaojbsunny/article/details/54017782
前端高级开发	angular2	服务	angular五种服务详解	一.constant服务二.value服务三.factory服务四.service服务五.provider服务六.装饰服务七.可以创建不同实例的服务	1.服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,所以,无论修改其中的哪一个,其它所有的服务都会被改变.2.服务的实例被修改过后,ng不会自动同步,需要使用$scope.$watch()监测其变化并手动刷新视图.3.constant服务不能通过decorator进行装饰.4.一些固定的参数和方法,使用constant5.可能被修改的参数和方法,使用value6.通过逻辑处理后得到的参数或方法,使用factory7.可以使用factory的也可以使用service,反之亦然(一般就是用factory)8.可以手动配置参数的服务,使用provider	大致讲解了ng中的'服务',在之后的很多地方也用到了服务,但是,所有的服务都是使用app.factory来创建的.但其实,创建服务有5种方法	https://www.cnblogs.com/liulangmao/p/4078246.html
前端高级开发	angular2	jquery和其他插件的应用	如何在Angular2中使用jQuery及其插件的方法	1、首先在index.html中引用jquery2、编写app.component.ts3、编写html、css	1、首先在index.html中引用jquery2、编写app.component.ts3、编写html、css	需要使用到jQuery的地方都要用declare声明以下，比如其他组件文件中。	http://www.jb51.net/article/105123.htm
前端高级开发	angular2	jquery和其他插件的应用	angular2——使用swiper插件	第一步：引入该插件的样式和js文件第二步：在typings.d.ts文件内 声明全局的Swiper对象。全局的对象一般都放在这里声明，声明后会自动关联到Swiper.js文件的Swiper对象第三步  参照官方的演示文档，把自己的内容放到三个div里面。注意这三个div有着 Swiper的固定的class类。第四步：在ts里初始化自己的Swiper对象	使用swiper插件步骤	swiper插件有这很好的滑动切换效果	http://blog.csdn.net/wgp15732622312/article/details/77435703?foxhandler=RssReadRenderProcessHandler
移动端开发	移动前端	响应式布局	响应式布局的开发基础知识	正确理解响应式布局	清楚了解响应式布局实现的原理	响应式设计需要注意的问题	https://www.cnblogs.com/dreamsboy/p/5656009.html
移动端开发	移动前端	响应式布局					https://www.cnblogs.com/yanayana/p/7066948.html
移动端开发	移动前端	响应式布局	@media 查询	@media 可以针对不同的屏幕尺寸设置不同的样式	媒体功能和媒体类型的区别	设置设计响应式的页面，@media 是非常有用的，使用的注意点包括媒体类型的确认等	http://www.runoob.com/cssref/css3-pr-mediaquery.html
移动端开发	移动前端	移动浏览器	移动端浏览器	移动端浏览器的内核	每一种内核代表的浏览器	理清移动端的浏览器的内核问题	https://www.cnblogs.com/diantao/p/5292704.html
移动端开发	移动前端	移动浏览器	移动端浏览器	移动端前端开发调试	利用chrome浏览器的模拟测试功能	对于这用你开发过程的一个熟悉	http://yujiangshui.com/multidevice-frontend-debug/
移动端开发	移动前端	视口	移动前端中 viewport	充分理解视口的概念	各种视口之间的区别和不同点	学习之前需要首先理解几个比较重要的概念，然后再去学习移动端视口的问题	http://www.css88.com/archives/5975
移动端开发	移动前端	视口	理想视口	理想视口的概念和使用	理想视口使用的时候需要注意的点以及一些兼容问题	前置的基础知识要先有个了解，然后在使用的过程中去学习解决兼容性的问题	http://blog.csdn.net/Amingluo/article/details/76611971
移动端开发	移动前端	相对单位	弹性布局—em的用法 	弹性布局、相对单位的用法，以及在实际的开发中解决的问题	em相对单位的具体使用方法	学习之前，学习相对单位em是为了解决移动端适配问题的，从这里出发是一个不错的切合点	https://www.cnblogs.com/happywonter/p/5806102.html
移动端开发	移动前端	相对单位	自适应解决方案—rem布局	自适应的解决方案，与弹性布局的不同点	rem与em相对单位的区别，以及优点	在具体学习rem之前，最好有em的前置知识，这样的话，学习的效率更高	https://www.cnblogs.com/Vayne-N/p/6903590.html
移动端开发	移动前端	移动端事件	移动前端常见的触摸事件	这些touch、tap、swipe都是移动端常见的事件	各种移动端事件的区别和兼容性问题	具体的移动端事件要自己确认，然后在具体的设备上进行测试	https://www.cnblogs.com/imwtr/p/5882166.html
移动端开发	移动前端	移动前端综合开发	前端技术 App开发记	技术选型以及要解决的问题	选型技术之后，确定技术的实现技巧以及兼容性问题解决方案	学习app开发之前，需要有比较丰富的移动前端的开发经验，比较有助于自己的技术选择	https://www.jianshu.com/p/f95759b28104
移动端开发	移动前端	移动前端综合开发	Hybrid App开发原理	理解混合开发的概念和要解决的问题，以及我们混合开发的框架技术	在多种混合开发的技术中去选择比较好的实施方案	了解混合开发的相关理论的东西，按照框架的讲解一步一步的学习。	https://www.cnblogs.com/dailc/p/5930231.html
移动端开发	移动前端	移动前端综合开发	Cordova 概述	Cordova基本概念和原理介绍	Cordova原理的理解	以解决问题为前提进行学习	https://www.w3cschool.cn/cordova/cordova_overview.html
移动端开发	移动前端	移动前端综合开发	Cordova 环境配置	Cordova 环境搭建	具体的搭建步骤和遇到的问题	全局安装的各种依赖包以及处理方式	https://www.w3cschool.cn/cordova/cordova_environment_setup.html
移动端开发	移动前端	移动前端综合开发	Cordova 第一个应用	应用的创建步骤和需要注意的问题	创建步骤和问题解决方式	方法可以不用明白原理，后期学习会有详细的API介绍	https://www.w3cschool.cn/cordova/cordova_first_application.html
移动端开发	移动前端	zepto框架	Zepto框架简介	Zepto的API大量参考jQuery，目的的是提供更轻量级的下载速度更快的更适用于移动端的框架。轻量级jQuery mobile除了提供触屏优化的框架之外，还提供一些UI方面的支持所以比较繁重。高度组件化。	Zepto的API大量参考jQuery，目的的是提供更轻量级的下载速度更快的更适用于移动端的框架。轻量级jQuery mobile除了提供触屏优化的框架之外，还提供一些UI方面的支持所以比较繁重。高度组件化。	Zepto不提供移动适配的解决	https://www.jianshu.com/p/c0e2ba33446f
移动端开发	移动前端	zepto框架	zepto和jquery的区别	zepto的不同使用8条小结	zepto和jquery区别	jQuery 和 Zepto.js 表面看起来差不多，其实一些细节上差异很大，同时支持 jQuery 和 Zepto.js 是一件吃力不讨好的事情，这应该也是 Foundation 5 放弃支持 Zepto 的一个原因。	http://blog.csdn.net/kongjiea/article/details/42522305
移动端开发	移动前端	zepto框架	Zepto.js核心选择器$()	$()$(selector, [context])   ⇒ collection$(<Zepto collection>)   ⇒ same collection$(<DOM nodes>)   ⇒ collection$(htmlString)   ⇒ collection$(htmlString, attributes)   ⇒ collection v1.0+Zepto(function($){ ... })  	如果$变量尚未定义，Zepto只设置了全局变量$指向它本身。允许您同时使用的Zepto和有用的遗留代码，例如，prototype.js。只要首先加载Prototype，Zepto将不会覆盖Prototype的 $ 函数。Zepto将始终设置全局变量Zepto指向它本身。	如果$变量尚未定义，Zepto只设置了全局变量$指向它本身。允许您同时使用的Zepto和有用的遗留代码，例如，prototype.js。只要首先加载Prototype，Zepto将不会覆盖Prototype的 $ 函数。Zepto将始终设置全局变量Zepto指向它本身。	http://www.uedsc.com/zepto-js-core-selecter.html
移动端开发	移动前端	zepto框架	Zepto.js触摸Touch事件说明	clientX、clientY：触摸点相对于浏览器窗口viewport的位置pageX、pageY： 触摸点相对于页面的位置screenX,screenY：触摸点相对于屏幕的位置identifier:touch：对象的unique IDtouchstart:手指触摸屏幕上的时候触发touchmove:手指在屏幕上移动的时候触发touchend:手指从屏幕上拿起的时候触发touchcancel:系统取消touch事件的时候触发tap —元素tap的时候触发。singleTap and doubleTap — 这一对事件可以用来检测元素上的单击和双击。(如果你不需要检测单击、双击，使用 tap 代替)。longTap — 当一个元素被按住超过750ms触发。swipe, swipeLeft, swipeRight, swipeUp, swipeDown — 当元素被划过时触发。(可选择给定的方向)	clientX、clientY：触摸点相对于浏览器窗口viewport的位置pageX、pageY： 触摸点相对于页面的位置screenX,screenY：触摸点相对于屏幕的位置identifier:touch：对象的unique IDtouchstart:手指触摸屏幕上的时候触发touchmove:手指在屏幕上移动的时候触发touchend:手指从屏幕上拿起的时候触发touchcancel:系统取消touch事件的时候触发tap —元素tap的时候触发。singleTap and doubleTap — 这一对事件可以用来检测元素上的单击和双击。(如果你不需要检测单击、双击，使用 tap 代替)。longTap — 当一个元素被按住超过750ms触发。swipe, swipeLeft, swipeRight, swipeUp, swipeDown — 当元素被划过时触发。(可选择给定的方向)	处理Touch事件能让你了解到用户的每一根手指的位置，在touch事件触发的时候产生，可以通过touch event handler的event对象取到，如果基于zepto.js开发，一般是通过event.touches[0]来获取属性。	http://www.uedsc.com/zepto-js-touch-event.html
移动端开发	移动前端	zepto框架	Zepto.js设置Animate动画特效	$.fx全局地动画设置：$.fx.off (在支持css transition 的浏览器中默认为false)：设置true来禁止所有animate() transitions。$.fx.speeds：用来设置动画时间的对象。_default (400 ms)fast (200 ms)slow (600 ms)改变现有值或者添加一个新属性去影响使用一个字符串来设置时间的动画。animateproperties: 一个对象，该对象包含了CSS动画的值，或者CSS帧动画的名称。duration (默认 400)：以毫秒为单位的时间，或者一个字符串。fast (200 ms)slow (600 ms)任何$.fx.speeds自定义属性easing (默认 linear)：指定动画的缓动类型，使用以下一个：easelinearease-in / ease-outease-in-outcubic-bezier(...)complete：动画完成时的回调函数delay: 以毫秒为单位的过度延迟时间	$.fx全局地动画设置：$.fx.off (在支持css transition 的浏览器中默认为false)：设置true来禁止所有animate() transitions。$.fx.speeds：用来设置动画时间的对象。_default (400 ms)fast (200 ms)slow (600 ms)改变现有值或者添加一个新属性去影响使用一个字符串来设置时间的动画。animateproperties: 一个对象，该对象包含了CSS动画的值，或者CSS帧动画的名称。duration (默认 400)：以毫秒为单位的时间，或者一个字符串。fast (200 ms)slow (600 ms)任何$.fx.speeds自定义属性easing (默认 linear)：指定动画的缓动类型，使用以下一个：easelinearease-in / ease-outease-in-outcubic-bezier(...)complete：动画完成时的回调函数delay: 以毫秒为单位的过度延迟时间	Zepto只使用CSS过渡效果的动画，会发现zepto的complete会先执行，在执行animate动画，所以回调函数应该写在后面，几乎能够支持全部的CSS动画，不兼容低版本的浏览器。	http://www.uedsc.com/zepto-js-animate.html
移动端开发	移动前端	zepto框架	Zepto.js表单处理方法函数	在Ajax post请求中将用作提交的表单元素的值编译成 URL编码的 字符串。	为 “submit” 事件绑定一个处理函数，或者触发元素上的 “submit” 事件。当没有给定function参数时，触发当前表单“submit”事件，并且执行默认的提交表单行为，除非调用了 preventDefault()。	当给定function参数时，在当前元素上它简单得为其在“submit”事件绑定一个处理函数。	http://www.uedsc.com/zepto-js-form.html
移动端开发	移动前端	zepto框架	Zepto.js异步加载AJAX请求	$.ajaxtype(默认： “GET”)：请求方法 (“GET”, “POST”, or other)url (默认： 当前地址)：发送请求的地址data (默认：none)：发送到服务器的数据；如果是GET请求，它会自动被作为参数拼接到url上。非String对象将通过 $.param 得到序列化字符串。processData (默认： true)： 对于非Get请求。是否自动将 data 转换为字符串。contentType (默认： “application/x-www-form-urlencoded”)： 发送信息至服务器时内容编码类型。 (这也可以通过设置 headers)。通过设置 false 跳过设置默认值。mimeType (默认： none): 覆盖响应的MIME类型。 v1.1+dataType (默认： none)：预期服务器返回的数据类型(“json”, “jsonp”, “xml”, “html”, or “text”)jsonp (默认：“callback”): JSONP回调查询参数的名称jsonpCallback (默认： “jsonp{N}”): 全局JSONP回调函数的 字符串（或返回的一个函数）名。设置该项能启用浏览器的缓存。 v1.1+timeout (默认： 0): 以毫秒为单位的请求超时时间, 0 表示不超时。headers: Ajax请求中额外的HTTP信息头对象async (默认：true): 默认设置下，所有请求均为异步。如果需发送同步请求，请将此设置为 false。global (默认：true): 请求将触发全局Ajax事件处理程序，设置为 false 将不会触发全局 Ajax 事件。context (默认：window): 这个对象用于设置Ajax相关回调函数的上下文(this指向)。traditional (默认： false): 激活传统的方式通过$.param来得到序列化的 data。cache (默认： true): 浏览器是否应该被允许缓存GET响应。从v1.1.4开始，当dataType选项为 "script" 或 jsonp时，默认为false。xhrFields (默认： none): 一个对象包含的属性被逐字复制到XMLHttpRequest的实例。 v1.1+username & password (默认： none): HTTP基本身份验证凭据Ajax 回调函数beforeSend(xhr, settings)：请求发出前调用，它接收xhr对象和settings作为参数对象。如果它返回 false ，请求将被取消。success(data, status, xhr)：请求成功之后调用。传入返回后的数据，以及包含成功代码的字符串。error(xhr, errorType, error)：请求出错时调用。 (超时，解析错误，或者状态码不在HTTP 2xx)。complete(xhr, status)：请求完成时调用，无论请求失败或成功。Ajax 事件ajaxStart (global)：如果没有其他Ajax请求当前活跃将会被触发。ajaxBeforeSend (data: xhr, options)：再发送请求前，可以被取消。ajaxSend (data: xhr, options)：像 ajaxBeforeSend，但不能取消。ajaxSuccess (data: xhr, options, data)：当返回成功时。ajaxError (data: xhr, options, error)：当有错误时。ajaxComplete (data: xhr, options)：请求已经完成后，无论请求是成功或者失败。ajaxStop (global)：如果这是最后一个活跃着的Ajax请求，将会被触发。	type(默认： “GET”)：请求方法 (“GET”, “POST”, or other)url (默认： 当前地址)：发送请求的地址data (默认：none)：发送到服务器的数据；如果是GET请求，它会自动被作为参数拼接到url上。非String对象将通过 $.param 得到序列化字符串。dataType (默认： none)：预期服务器返回的数据类型(“json”, “jsonp”, “xml”, “html”, or “text”)jsonp (默认：“callback”): JSONP回调查询参数的名称jsonpCallback (默认： “jsonp{N}”): 全局JSONP回调函数的 字符串（或返回的一个函数）名。设置该项能启用浏览器的缓存async (默认：true): 默认设置下，所有请求均为异步。如果需发送同步请求，请将此设置为 false。	执行Ajax请求。它可以是本地资源，或者通过支持HTTP access control的浏览器 或者通过 JSONP来实现跨域。	http://www.uedsc.com/zepto-js-ajax.html
移动端开发	移动前端	zepto框架	Zepto.js执行Ajax GET请求$.get	$.get$.get(url, function(data, status, xhr){ ... })   ⇒ XMLHttpRequest$.get(url, [data], [function(data, status, xhr){ ... }], [dataType])   ⇒ XMLHttpRequest v1.0+执行一个Ajax GET请求。这是一个 $.ajax的简写方式。$.get('/whatevs.html', function(response){  $(document.body).append(response)})	Zepto.js执行Ajax GET请求$.get	Zepto.js执行Ajax GET请求$.get	http://www.uedsc.com/zepto-js-ajax-get.html
移动端开发	移动前端	zepto框架	Zepto.js通过 Ajax GET请求获取JSON数据$.getJSON	$.getJSON$.getJSON(url, function(data, status, xhr){ ... })   ⇒ XMLHttpRequest$.getJSON(url, [data], function(data, status, xhr){ ... })   ⇒ XMLHttpRequest v1.0+通过 Ajax GET请求获取JSON数据。这是一个 $.ajax 的简写方式。$.getJSON('/awesome.json', function(data){  console.log(data)})// fetch data from another domain with JSONP$.getJSON('//example.com/awesome.json?callback=?', function(remoteData){  console.log(remoteData)})	Zepto.js通过 Ajax GET请求获取JSON数据$.getJSON	Zepto.js通过 Ajax GET请求获取JSON数据$.getJSON	http://www.uedsc.com/zepto-js-getjson.html
移动端开发	移动前端	zepto框架	Zepto.js序列化一个对象$.param	$.param$.param(object, [shallow])   ⇒ string$.param(array)   ⇒ string	序列化一个对象，在Ajax请求中提交的数据使用URL编码的查询字符串表示形式。如果shallow设置为true。嵌套对象不会被序列化，嵌套数组的值不会使用放括号在他们的key上。	如果任何对象的某个属性值是一个函数，而不是一个字符串，该函数将被调用并且返回值后才会被序列化。此外，还接受 serializeArray格式的数组，其中每个项都有 “name” 和 “value”属性。	http://www.uedsc.com/zepto-js-param.html
移动端开发	移动前端	zepto框架	Zepto.js执行Ajax POST请求$.post	$.post$.post(url, [data], function(data, status, xhr){ ... }, [dataType])   ⇒ XMLHttpRequest执行Ajax POST请求。这是一个 $.ajax 的简写方式。$.post('/create', { sample: 'payload' }, function(response){  // process response})data 参数可以是一个字符串：$.post('/create', $('#some_form').serialize(), function(response){  // ...})	$.post$.post(url, [data], function(data, status, xhr){ ... }, [dataType])   ⇒ XMLHttpRequest执行Ajax POST请求。这是一个 $.ajax 的简写方式。$.post('/create', { sample: 'payload' }, function(response){  // process response})data 参数可以是一个字符串：$.post('/create', $('#some_form').serialize(), function(response){  // ...})	Zepto.js执行Ajax POST请求$.post	http://www.uedsc.com/zepto-js-post.html
移动端开发	移动前端	zepto框架	Zepto.js事件处理函数	$.Event、$.proxy 、bind、die、event.isDefaultPrevented 、event.isImmediatePropagationStopped、event.isPropagationStopped、live、off、on、one、trigger、triggerHandler、unbind、undelegate	$.Event$.Event(type, [properties])   ⇒ event创建并初始化一个指定的DOM事件。如果给定properties对象，使用它来扩展出新的事件对象。默认情况下，事件被设置为冒泡方式；这个可以通过设置bubbles为false来关闭。一个事件初始化的函数可以使用 trigger来触发。$.Event('mylib:change', { bubbles: false })接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境，新函数中this指向context参数。另外一种形式，原始的function是从上下文(context)对象的特定属性读取。如果传递超过2个的额外参数，它们被用于 传递给fn参数的函数 引用。bind不推荐, 使用 on 代替。为一个元素绑定一个处理事件。delegate不推荐, 使用 on 代替。基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。die不推荐, 使用 on 代替。删除通过 live 添加的事件。如果preventDefault()被该事件的实例调用，那么返回true。 这可作为跨平台的替代原生的 defaultPrevented属性，如果 defaultPrevented缺失或在某些浏览器下不可靠的时候。live不推荐, 使用 on 代替。类似delegate，添加一个个事件处理器到符合目前选择器的所有元素匹配，匹配的元素可能现在或将来才创建。off移除通过 on 添加的事件.移除一个特定的事件处理程序， 必须通过用on()添加的那个相同的函数。否则，只通过事件类型调用此方法将移除该类型的所有处理程序。如果没有参数，将移出当前元素上全部的注册事件。on添加事件处理程序到对象集合中得元素上。多个事件可以通过空格的字符串方式添加，或者以事件类型为键、以函数为值的对象 方式。如果给定css选择器，当事件在匹配该选择器的元素上发起时，事件才会被触发（愚人码头注：即事件委派，或者说事件代理）。one添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。selector 和 data 等参数说明请查看.on()。triggerZepto仅仅支持在dom元素上触发事件。triggerHandler像 trigger，它只在当前元素上触发事件，但不冒泡。unbind移除通过 bind 注册的事件。undelegate移除通过delegate 注册的事件。	$.Event$.Event(type, [properties])   ⇒ event创建并初始化一个指定的DOM事件。如果给定properties对象，使用它来扩展出新的事件对象。默认情况下，事件被设置为冒泡方式；这个可以通过设置bubbles为false来关闭。一个事件初始化的函数可以使用 trigger来触发。$.Event('mylib:change', { bubbles: false })接受一个函数，然后返回一个新函数，并且这个新函数始终保持了特定的上下文(context)语境，新函数中this指向context参数。另外一种形式，原始的function是从上下文(context)对象的特定属性读取。如果传递超过2个的额外参数，它们被用于 传递给fn参数的函数 引用。bind不推荐, 使用 on 代替。为一个元素绑定一个处理事件。delegate不推荐, 使用 on 代替。基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。die不推荐, 使用 on 代替。删除通过 live 添加的事件。如果preventDefault()被该事件的实例调用，那么返回true。 这可作为跨平台的替代原生的 defaultPrevented属性，如果 defaultPrevented缺失或在某些浏览器下不可靠的时候。live不推荐, 使用 on 代替。类似delegate，添加一个个事件处理器到符合目前选择器的所有元素匹配，匹配的元素可能现在或将来才创建。off移除通过 on 添加的事件.移除一个特定的事件处理程序， 必须通过用on()添加的那个相同的函数。否则，只通过事件类型调用此方法将移除该类型的所有处理程序。如果没有参数，将移出当前元素上全部的注册事件。on添加事件处理程序到对象集合中得元素上。多个事件可以通过空格的字符串方式添加，或者以事件类型为键、以函数为值的对象 方式。如果给定css选择器，当事件在匹配该选择器的元素上发起时，事件才会被触发（愚人码头注：即事件委派，或者说事件代理）。one添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。selector 和 data 等参数说明请查看.on()。triggerZepto仅仅支持在dom元素上触发事件。triggerHandler像 trigger，它只在当前元素上触发事件，但不冒泡。unbind移除通过 bind 注册的事件。undelegate移除通过delegate 注册的事件。	http://www.uedsc.com/zepto-js-event.html
移动端开发	移动前端	zepto框架	Zepto.js核心方法函数介绍	$.each遍历数组元素或以key-value值对方式遍历对象。回调函数返回 false 时停止遍历。$.extend通过源对象扩展目标对象的属性，源对象属性将覆盖目标对象属性。默认情况下为，复制为浅拷贝（浅复制）。如果第一个参数为true表示深度拷贝（深度复制）。$.fnZepto.fn是一个对象，它拥有Zepto对象上所有可用的方法，如 addClass()， attr()，和其它方法。在这个对象添加一个方法，所有的Zepto对象上都能用到该方法。$.inArray返回数组中指定元素的索引值（愚人码头注：以0为基数），如果没有找到该元素则返回-1。$.isArray如果object是array，则返回ture。$.isFunction如果object是function，则返回ture。$.map通过遍历集合中的元素，返回通过迭代函数的全部结果，（愚人码头注：一个新数组）null 和 undefined 将被过滤掉。$.parseJSON 原生JSON.parse方法的别名。（愚人码头注：接受一个标准格式的 JSON 字符串，并返回解析后的 JavaScript 对象。）$.trim删除字符串首尾的空白符。类似String.prototype.trim()。$.type获取JavaScript 对象的类型。可能的类型有： null undefined boolean number string function array date regexp object error。add添加元素到当前匹配的元素集合中。如果给定content参数，将只在content元素中进行查找，否则在整个document中查找。addClass为每个匹配的元素添加指定的class类名。多个class类名使用空格分隔。after在每个匹配的元素后插入内容（愚人码头注：外部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。append在每个匹配的元素末尾插入内容（愚人码头注：内部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。appendTo将匹配的元素插入到目标元素的末尾（愚人码头注：内部插入）。这个有点像 append，但是插入的目标与其相反。attr读取或设置dom的属性。如果没有给定value参数，则读取对象集合中第一个元素的属性值。当给定了value参数。则设置对象集合中所有元素的该属性的值。当value参数为null，那么这个属性将被移除(类似removeAttr)，多个属性可以通过对象键值对的方式进行设置。要读取DOM的属性如 checked和selected, 使用 prop。before在匹配每个元素的前面插入内容（愚人码头注：外部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。children获得每个匹配元素集合元素的直接子元素，如果给定selector，那么返回的结果中只包含符合css选择器的元素。concat添加元素到一个Zepto对象集合形成一个新数组。如果参数是一个数组，那么这个数组中的元素将会合并到Zepto对象集合中。dataeachemptyeqfilterfindfirst..........	$.each遍历数组元素或以key-value值对方式遍历对象。回调函数返回 false 时停止遍历。$.extend通过源对象扩展目标对象的属性，源对象属性将覆盖目标对象属性。默认情况下为，复制为浅拷贝（浅复制）。如果第一个参数为true表示深度拷贝（深度复制）。$.fnZepto.fn是一个对象，它拥有Zepto对象上所有可用的方法，如 addClass()， attr()，和其它方法。在这个对象添加一个方法，所有的Zepto对象上都能用到该方法。$.inArray返回数组中指定元素的索引值（愚人码头注：以0为基数），如果没有找到该元素则返回-1。$.isArray如果object是array，则返回ture。$.isFunction如果object是function，则返回ture。$.map通过遍历集合中的元素，返回通过迭代函数的全部结果，（愚人码头注：一个新数组）null 和 undefined 将被过滤掉。$.parseJSON 原生JSON.parse方法的别名。（愚人码头注：接受一个标准格式的 JSON 字符串，并返回解析后的 JavaScript 对象。）$.trim删除字符串首尾的空白符。类似String.prototype.trim()。$.type获取JavaScript 对象的类型。可能的类型有： null undefined boolean number string function array date regexp object error。add添加元素到当前匹配的元素集合中。如果给定content参数，将只在content元素中进行查找，否则在整个document中查找。addClass为每个匹配的元素添加指定的class类名。多个class类名使用空格分隔。after在每个匹配的元素后插入内容（愚人码头注：外部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。append在每个匹配的元素末尾插入内容（愚人码头注：内部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。appendTo将匹配的元素插入到目标元素的末尾（愚人码头注：内部插入）。这个有点像 append，但是插入的目标与其相反。attr读取或设置dom的属性。如果没有给定value参数，则读取对象集合中第一个元素的属性值。当给定了value参数。则设置对象集合中所有元素的该属性的值。当value参数为null，那么这个属性将被移除(类似removeAttr)，多个属性可以通过对象键值对的方式进行设置。要读取DOM的属性如 checked和selected, 使用 prop。before在匹配每个元素的前面插入内容（愚人码头注：外部插入）。内容可以为html字符串，dom节点，或者节点组成的数组。children获得每个匹配元素集合元素的直接子元素，如果给定selector，那么返回的结果中只包含符合css选择器的元素。concat添加元素到一个Zepto对象集合形成一个新数组。如果参数是一个数组，那么这个数组中的元素将会合并到Zepto对象集合中。dataeachemptyeqfilterfindfirst..........	Zepto.js核心方法函数介绍	http://www.uedsc.com/zepto-js-core.html
全栈开发	node	Node.js 教程	Node.js 安装配置	安装node:1、Window 上安装Node.js2、Windows 二进制文件 (.exe)安装3、Node.js 源码安装4、CentOS 下安装 Node.js	Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本。	可以根据不同平台系统选择你需要的Node.js安装包	http://www.runoob.com/nodejs/nodejs-install-setup.html
全栈开发	node	Node.js 教程	Node.js 创建第一个应用	步骤一、引入 required 模块步骤二、创建服务器	引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。	使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器	http://www.runoob.com/nodejs/nodejs-http-server.html
全栈开发	node	Node.js 教程	NPM 使用介绍	1、使用 npm 命令安装模块：$ npm install2、使用 package.json：package.json 位于模块的目录下，用于定义包的属性3、卸载模块：$ npm uninstall express4、更新模块：$ npm update express5、搜索模块：$ npm search express6、创建模块	会使用npm命令	NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：允许用户从NPM服务器下载别人编写的第三方包到本地使用。允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。	http://www.runoob.com/nodejs/nodejs-npm.html
全栈开发	node	Node.js 教程	Node.js REPL(交互式解释器)	1、Node.js REPL 的命令行窗口中执行简单的数学运算2、可以将数据存储在变量中，并在你需要的时候使用它3、Node REPL 支持输入多行表达式4、可以使用下划线(_)获取上一个表达式的运算结果	REPL 命令ctrl + c - 退出当前终端。ctrl + c 按下两次 - 退出 Node REPL。ctrl + d - 退出 Node REPL.向上/向下 键 - 查看输入的历史命令tab 键 - 列出当前命令.help - 列出使用命令.break - 退出多行表达式.clear - 退出多行表达式.save filename - 保存当前的 Node REPL 会话到指定文件.load filename - 载入当前 Node REPL 会话的文件内容。	Node 自带了交互式解释器，可以执行以下任务：读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中执行 - 执行输入的数据结构打印 - 输出结果循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。	http://www.runoob.com/nodejs/nodejs-repl.html
全栈开发	node	Node.js 教程	Node.js 回调函数	阻塞代码、非阻塞代码	Node.js 异步编程的直接体现就是回调。	阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内	http://www.runoob.com/nodejs/nodejs-callback.html
全栈开发	node	Node.js 教程	Node.js 事件循环	Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。	可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件	Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.	http://www.runoob.com/nodejs/nodejs-event-loop.html
全栈开发	node	Node.js 教程	Node.js EventEmitter	方法：1、addListener(event, listener)为指定事件添加一个监听器到监听器数组的尾部。2、on(event, listener)为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。3、once(event, listener)为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。4、removeListener(event, listener)移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。5、removeAllListeners([event])移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。6、setMaxListeners(n)默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。7、listeners(event)返回指定事件的监听器数组。8、emit(event, [arg1], [arg2], [...])按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。类方法：1、listenerCount(emitter, event)返回指定事件的监听器数量。事件：newListenerevent - 字符串，事件名称listener - 处理事件函数该事件在添加新监听器时被触发。removeListenerevent - 字符串，事件名称listener - 处理事件函数从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。	方法、类方法、事件	Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。	http://www.runoob.com/nodejs/nodejs-event.html
全栈开发	node	Node.js 教程	Node.js Buffer(缓冲区)	 Node.js Buffer 模块常用的方法：1、new Buffer(size) 2、new Buffer(buffer) 3、new Buffer(str[, encoding])4、buf.length5、buf.write(string[, offset[, length]][, encoding])......	Node.js Buffer 模块常用的方法（注意有些方法在旧版本是没有的）	在v6.0之前创建Buffer对象直接使用new Buffer()构造函数来创建对象实例，但是Buffer对内存的权限操作相比很大，可以直接捕获一些敏感信息，所以在v6.0以后，官方文档里面建议使用 Buffer.from() 接口去创建Buffer对象。	http://www.runoob.com/nodejs/nodejs-buffer.html
全栈开发	node	Node.js 教程	Node.js Stream(流)	Stream 有四种流类型：Readable - 可读操作Writable - 可写操作Duplex - 可读可写操作.Transform - 操作被写入数据，然后读出结果所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：data - 当有数据可读时触发。end - 没有更多的数据可读时触发。error - 在接收和写入过程中发生错误时触发。finish - 所有数据已被写入到底层系统时触发。	常用的流操作:从流中读取数据写入流管道流链式流	Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。	http://www.runoob.com/nodejs/nodejs-stream.html
全栈开发	node	Node.js 教程	Node.js模块系统	创建模块	服务端的模块放在哪里	为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。	http://www.runoob.com/nodejs/nodejs-module-system.html
全栈开发	node	Node.js 教程	Node.js 函数	匿名函数	函数传递是如何让HTTP服务器工作的	在JavaScript中，一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。	http://www.runoob.com/nodejs/nodejs-function.html
全栈开发	node	Node.js 教程	Node.js 路由	Node.js 路由	 url 和 querystring 模块	我们要为路由提供请求的 URL 和其他需要的 GET 及 POST 参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看 HTTP 请求，从中提取出请求的 URL 以及 GET/POST 参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。我们需要的所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的 Node.JS 模块，它们分别是 url 和 querystring 模块。	http://www.runoob.com/nodejs/nodejs-router.html
全栈开发	node	Node.js 教程	Node.js 全局对象	全局对象与全局变量__filename__dirnamesetTimeout(cb, ms)clearTimeout(t)setInterval(cb, ms)console 方法process退出状态码Process 属性	global 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：在最外层定义的变量；全局对象的属性；隐式定义的变量（未定义直接赋值的变量	永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险	http://www.runoob.com/nodejs/nodejs-global-object.html
全栈开发	node	Node.js 教程	Node.js 常用工具	util.inheritsutil.inspectutil.isArray(object)util.isRegExp(object)util.isDate(object)util.isError(object)	util.inheritsutil.inspectutil.isArray(object)util.isRegExp(object)util.isDate(object)util.isError(object)	util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足	http://www.runoob.com/nodejs/nodejs-util.html
全栈开发	node	Node.js 教程	Node.js 文件系统	fs.open(path, flags[, mode], callback)fs.stat(path, callback)fs.writeFile(file, data[, options], callback)fs.read(fd, buffer, offset, length, position, callback)fs.close(fd, callback)fs.ftruncate(fd, len, callback)fs.unlink(path, callback)fs.mkdir(path[, mode], callback)fs.rmdir(path, callback)	 Node.js 文件系统的方法	Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API	http://www.runoob.com/nodejs/nodejs-fs.html
全栈开发	node	Node.js 教程	Node.js GET/POST请求	获取GET请求内容获取 POST 请求内容	获取GET请求内容获取 POST 请求内容	表单提交到服务器一般都使用 GET/POST 请求。	http://www.runoob.com/nodejs/node-js-get-post.html
全栈开发	node	Node.js 教程	Node.js 工具模块	OS 模块Path 模块Net 模块DNS 模块Domain 模块	OS 模块Path 模块Net 模块DNS 模块Domain 模块	OS 模块Path 模块Net 模块DNS 模块Domain 模块	http://www.runoob.com/nodejs/nodejs-utitlity-module.html
全栈开发	node	Node.js 教程	Node.js Web 模块	什么是 Web 服务器Web 应用架构使用 Node 创建 Web 服务器使用 Node 创建 Web 客户端	目前最主流的三个Web服务器是Apache、Nginx、IIS。	目前最主流的三个Web服务器是Apache、Nginx、IIS。	http://www.runoob.com/nodejs/nodejs-web-module.html
全栈开发	node	Node.js 教程	Node.js Express 框架	Express 简介安装 Express请求和响应路由静态文件GET 方法POST 方法文件上传Cookie 管理	Express 框架核心特性：可以设置中间件来响应 HTTP 请求。定义了路由表用于执行不同的 HTTP 请求动作。可以通过向模板传递参数来动态渲染 HTML 页面。	Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站	http://www.runoob.com/nodejs/nodejs-express-framework.html
全栈开发	node	Node.js 教程	Node.js RESTful API	什么是 REST？创建 RESTful	创建 RESTful:获取用户列表添加用户显示用户详情删除用户	为 REST 基本架构的四个方法：GET - 用于获取数据。PUT - 用于更新或添加数据。DELETE - 用于删除数据。POST - 用于添加数据。	http://www.runoob.com/nodejs/nodejs-restful-api.html
全栈开发	node	Node.js 教程	Node.js 多进程	exec() 方法spawn() 方法fork 方法	exec() 方法spawn() 方法fork 方法	 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能	http://www.runoob.com/nodejs/nodejs-process.html
全栈开发	node	Node.js 教程	Node.js JXcore 打包	JXcore 安装包代码载入 JX 文件	JXcore 安装包代码载入 JX 文件	JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行	http://www.runoob.com/nodejs/nodejs-jxcore-packaging.html
全栈开发	node	Node.js 教程	Node.js 连接 MySQL	数据库操作：查询数据插入数据更新数据删除数据	数据库操作：查询数据插入数据更新数据删除数据	介绍如何使用 Node.js 来连接 MySQL，并对数据库进行操作	http://www.runoob.com/nodejs/nodejs-mysql.html
全栈开发	node	Node.js 教程	Node.js 连接 MongoDB	创建数据库创建集合数据库操作	数据库操作	MongoDB是一种文档导向数据库管理系统，由C++撰写而成。	http://www.runoob.com/nodejs/nodejs-mongodb.html
全栈开发	MongoDB	MongoDB基础	MongoDB简介	主要特点历史	主要特点	注意MongoDB的使用场景	http://www.runoob.com/mongodb/nosql.html
全栈开发	MongoDB	MongoDB基础	MongoDB 创建数据库	创建数据库语法	创建数据库语法	MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中	http://www.runoob.com/mongodb/mongodb-create-database.html
全栈开发	MongoDB	MongoDB基础	MongoDB 删除数据库	删除数据库	删除数据库	删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名	http://www.runoob.com/mongodb/mongodb-dropdatabase.html
全栈开发	MongoDB	MongoDB基础	MongoDB 插入文档	插入文档的方法	插入文档的方法	插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据	http://www.runoob.com/mongodb/mongodb-insert.html
全栈开发	MongoDB	MongoDB基础	MongoDB 更新文档	更新文档的方法	更新文档的方法	MongoDB 使用 update() 和 save() 方法来更新集合中的文档	http://www.runoob.com/mongodb/mongodb-update.html
全栈开发	MongoDB	MongoDB基础	MongoDB 删除文档	删除文档的方法	删除文档的方法	MongoDB remove()函数是用来移除集合中的数据	http://www.runoob.com/mongodb/mongodb-remove.html
全栈开发	MongoDB	MongoDB基础	MongoDB 查询文档	查询文档的方法	查询文档的方法	MongoDB 查询文档使用 find() 方法	http://www.runoob.com/mongodb/mongodb-query.html
全栈开发	Redis	Redis 教程	Redis 简介	Redis 优势Redis与其他key-value存储有什么不同	Redis 优势Redis与其他key-value存储有什么不同	注意分析Redis与其他key-value存储有什么不同使用场景	http://www.runoob.com/redis/redis-intro.html
全栈开发	Redis	Redis 教程	Redis 安装	Redis 安装	Redis 安装	不同操作系统下安装注意点不一样	http://www.runoob.com/redis/redis-install.html
全栈开发	Redis	Redis 教程	Redis 配置	编辑配置参数	编辑配置参数	注意配置命令可以通过 CONFIG 命令查看或设置配置项	http://www.runoob.com/redis/redis-conf.html
全栈开发	Redis	Redis 教程	Redis 数据类型	string（字符串），hash（哈希），list（列表），set（集合）	string（字符串），hash（哈希），list（列表），set（集合）	不同数据类型的使用和场景	http://www.runoob.com/redis/redis-data-types.html
全栈开发	Redis	Redis 命令	Redis 命令	远程服务上执行命令	远程服务上执行命令	如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令	http://www.runoob.com/redis/redis-commands.html
全栈开发	Redis	Redis 命令	Redis 键(key)	Redis keys 命令	Redis keys 命令	Redis 键命令用于管理 redis 的键	http://www.runoob.com/redis/redis-keys.html
全栈开发	Redis	Redis 命令	Redis 字符串(String)	Redis 字符串命令	Redis 字符串命令	Redis 字符串数据类型的相关命令用于管理 redis 字符串值	http://www.runoob.com/redis/redis-strings.html
全栈开发	Redis	Redis 命令	Redis 哈希(Hash)	Redis hash 命令	Redis hash 命令	Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象	http://www.runoob.com/redis/redis-hashes.html
全栈开发	Redis	Redis 命令	Redis 列表(List)	Redis 列表命令	Redis 列表命令	Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)	http://www.runoob.com/redis/redis-lists.html
全栈开发	Redis	Redis 命令	Redis 集合(Set)	Redis 集合命令	Redis 集合命令	Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)	http://www.runoob.com/redis/redis-sets.html
就业扩展技术	git	Git 教程	Git 教程	Git 与 SVN 区别	Git 与 SVN 区别	了解git跟svn的区别	http://www.runoob.com/git/git-tutorial.html
就业扩展技术	git	Git 安装配置	Git 安装配置	Git 安装配置	Git 安装配置	了解git在个平台上怎样进行安装和使用	http://www.runoob.com/git/git-install-setup.html
就业扩展技术	git	Git 工作流程	Git 工作流程	Git 工作流程	Git 工作流程	理解git是怎么实现数据提交和备份的	http://www.runoob.com/git/git-workflow.html
就业扩展技术	git	Git 工作区、暂存区和版本库	Git 工作区、暂存区和版本库	工作区暂缓区版本库	工作区暂缓区版本库	理解三者分别是干了什么，分别是做什么用的	http://www.runoob.com/git/git-workspace-index-repo.html
就业扩展技术	git	Git 创建仓库	Git 创建仓库	Git 创建仓库	Git 创建仓库	会使用命令创建git仓库	http://www.runoob.com/git/git-create-repository.html
就业扩展技术	git	Git 基本操作	Git 基本操作	git基本命令操作	git基本命令操作	会使用git常用命令实现代码的获取、提交，理解每条命令使用的含义	http://www.runoob.com/git/git-basic-operations.html
就业扩展技术	git	Git 分支管理	Git 分支管理	列出分支删除分支分支合并合并冲突	列出分支删除分支分支合并合并冲突	学会使用分支命令管理仓库的分支	http://www.runoob.com/git/git-branch.html
就业扩展技术	git	Git 查看提交历史	Git 查看提交历史	Git 查看提交历史	Git 查看提交历史	学会使用历史命令查看提交的历史记录	http://www.runoob.com/git/git-commit-history.html
就业扩展技术	git	Git 标签	Git 标签	Git 标签	Git 标签	使用标签命令查看对应的信息	http://www.runoob.com/git/git-tag.html
就业扩展技术	git	Git Github	Git Github	Git 远程仓库(Github)	Git 远程仓库(Github)	结合git命令将代码提交至github远程仓库进行代码管理	http://www.runoob.com/git/git-remote-repo.html
就业扩展技术	git	Git 服务器搭建	Git 服务器搭建	Git 服务器搭建	Git 服务器搭建	使用git搭建服务器实现代码管理	http://www.runoob.com/git/git-server.html
就业扩展技术	webpack	Webpack 入门教程	Webpack 入门教程	安装 Webpack创建项目创建第二个 JS 文件LOADER配置文件插件开发环境	webpack使用步骤	Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源	https://www.runoob.com/w3cnote/webpack-tutorial.html
就业扩展技术	webpack	gulp与webpack的区别	gulp与webpack的区别	1、gulp简介2、webpack简介3、gulp与webpack的相同点4、gulp与webpack的不同点5、总结	gulp与webpack的相同点gulp与webpack的不同点	常有人拿gulp与webpack来比较，知道这两个构建工具功能上有重叠的地方，可单用，也可一起用，但本质的区别就没有那么清晰	https://www.cnblogs.com/lovesong/p/6413546.html
就业扩展技术	webpack	webpack与grunt/glub 的比较	webpack与grunt/glub 的比较	webpack、grunt、glub 都是前端打包的工具：    grunt/gulp 的工作方式是：在一个配置文件中，指明对某些文件进行压缩、组合、检查等任务的具体步骤，然后在运行中输入相应的命令。     webpack 的工作方式是：  把你的项目当做一个整体，通过一个指定的主文件名（index.js, 一般是入口文件），webpack   将从这个文件开始找到你的项目所依赖的文件，使用loaders 来处理它们，最后打包为一个浏览器可识别的js 文件。    最大的优点：模块化	 grunt/gulp 的工作方式webpack的工作方式	webpack、grunt、glub 都是前端打包的工具	https://www.cnblogs.com/leyan/p/6433711.html
就业扩展技术	webpack	Webpack与其他打包工具的区别	Webpack与其他打包工具的区别	1.代码分割2.Loaders3.插件机制	1.代码分割2.Loaders4.插件机制	webpack是一个模块化加载器兼打包工具，它同时支持AMD、CMD等加载规范	http://blog.csdn.net/dreamstom/article/details/53590478
就业扩展技术	webpack	浅谈webpack打包原理	浅谈webpack打包原理	核心思想：一切皆模块： 正如js文件可以是一个“模块（module）”一样，其他的（如css、image或html）文件也可视作模 块。因此，你可以require(‘myJSfile.js’)亦可以require(‘myCSSfile.css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。按需加载： 传统的模块打包工具（module bundlers）最终将所有的模块编译生成一个庞大的bundle.js文件。但是在真实的app里边，“bundle.js”文件可能有10M到15M之大可能会导致应用一直处于加载中状态。因此Webpack使用许多特性来分割代码然后生成多个“bundle”文件，而且异步加载部分代码以实现按需加载。	webpack打包原理	webpack并不强制你使用某种模块化方案，而是通过兼容所有模块化方案让你无痛接入项目。有了webpack，你可以随意选择你喜欢的模块化方案，至于怎么处理模块之间的依赖关系及如何按需打包，webpack会帮你处理好的	http://blog.csdn.net/u014168594/article/details/77198729
就业扩展技术	webpack	谈谈webpack 的优势	谈谈webpack 的优势	1. webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。2. 能被模块化的不仅仅是 JS 了。3. 开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。4. 扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。	webpack 的优势	webpack 的优势	https://www.cnblogs.com/pms01/p/7067893.html
就业扩展技术	webpack	 Webpack对比其他框架的优势分析	 Webpack对比其他框架的优势分析	1、代码拆分2、Loader3、智能解析4、插件系统5、快速运行	 Webpack对比其他框架的优势分析	 Webpack对比其他框架的优势分析	http://blog.csdn.net/itkingone/article/details/70045587
就业扩展技术	sass	sass安装	sass安装	sass安装	sass安装	学会安装sass	https://www.w3cplus.com/sassguide/install.html
就业扩展技术	sass	sass编译	sass编译	sass编译	sass编译	会使用命令或者编译工具进行编译	https://www.w3cplus.com/sassguide/compile.html
就业扩展技术	sass	sass语法	sass语法	导入注释变量嵌套(Nesting)@at-root混合(mixin)继承函数运算条件判断及循环	导入注释变量嵌套(Nesting)@at-root混合(mixin)继承函数运算条件判断及循环	注意如何使用SASS文件进行相互导入，注意使用SASS进行遍历定义继承等功能的使用	https://www.w3cplus.com/sassguide/syntax.html
就业扩展技术	sass	sass调试	sass调试	sass调试	sass调试	结合CSS调试实现使用SASS进行代码调试	https://www.w3cplus.com/sassguide/debug.html
就业扩展技术	less	less快速入门	less快速入门	less快速入门	less快速入门	了解Less预处理语言如何使用	http://lesscss.cn/#getting-started
就业扩展技术	less	less使用方法	less使用方法	安装命令行用法代码用法浏览器端用法	安装命令行用法代码用法浏览器端用法	搭建less开发环境学习期基本用法	http://lesscss.cn/#using-less-installationhttp://less.bootcss.com/usage/
就业扩展技术	less	less函数	less函数	杂项函数字符串函数列表函数数学函数类型函数颜色定义函数颜色通道函数颜色操作函数颜色混合函数	杂项函数字符串函数列表函数数学函数类型函数颜色定义函数颜色通道函数颜色操作函数颜色混合函数	学习Less 所内置的函数的用法	http://less.bootcss.com/functions/#misc-functions
就业扩展技术	less	less语言特性	less语言特性	概览变量Extend混合（Mixin）带参数的Mixin作为函数使用的MixinImport DirectivesImport OptionsMixin GuardsCSS Guards循环合并父选择符	变量Extend混合（Mixin）带参数的Mixin作为函数使用的MixinImport DirectivesImport OptionsMixin GuardsCSS Guards循环合并父选择符	了解Less的语言特性，能更好的应用到代码开发中	http://less.bootcss.com/features/
就业扩展技术	less	less和sass的区别	less和sass的区别	less和sass的区别	less和sass的区别	理解sass和less使用的区别，根据异同点更好的学习less和sass	https://www.w3cplus.com/css/an-introduction-to-less-and-comparison-to-sass.htmlhttps://www.jianshu.com/p/e3f1fcbbccc3https://www.cnblogs.com/wangpenghui522/p/5467560.html
就业扩展技术	框架插件应用	插件	评分组件	在项目开发中，评分插件的使用还是比较广泛的，特别是这类经常使用而且开发比较困难的功能，使用插件很有必要	根据业务选择满足自己项目的插件，然后根据API去学习配置	根据所选插件的PAI以及demo进行自行配置相关的参数，满足使用要求	http://plugins.krajee.com/star-rating-demo-basic-usage
就业扩展技术	框架插件应用	插件	my97日历插件	日历插件可以说在项目开发中用的非常多，所以这块插件市面上也是比较杂的，这里推荐使用My97日历插件	My97日历插件使用比较较为广泛，API比较详细，可以满足我们需求，根据自己实际的项目开发进行选择	学习插件的方法，先看下案例demo的演示，确定是否可以满足我们开发的需要，然后下载demo进行配置	http://my97.net/demo/index.htm
就业扩展技术	框架插件应用	插件	fullpage插件	fullPage.js 是一个基于 jQuery 的插件，它能够很方便、很轻松的制作出全屏网站	详细查看API的相关参数配置，然后去配置自己的代码进行开发	根据自己的需求，安装相应的步骤去配置全屏滚动插件	http://fullpage.81hu.com/
就业扩展技术	框架插件应用	插件	懒加载Lazyload插件	jquery.lazyload.js帮我们解决问题，优化页面性能	根据相关的插件API进行配置，应用到我们的页面中	大型页面开发中，懒加载技术应用广泛，使用插件需要进行相应的配置，依托于jquery框架	https://www.w3cways.com/1765.html
就业扩展技术	框架插件应用	插件	Echarts框架的应用	ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器，底层依赖轻量级的矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。	框架做的比较复杂，API比较全面，需要自己去自行研究API惊醒配置	根据自己具体的项目配置，满足自己项目要求即可，不用把全部的API方法进行研究，必要性不大	http://echarts.baidu.com/
就业扩展技术	框架插件应用	开发工具	Koala编译工具的基本使用	koala是一个前端预处理器语言图形编译工具，支持Less、Sass、Compass、CoffeeScript，帮助web开发者更高效地使用它们进行开发。跨平台运行，完美兼容windows、linux、mac。	图形化的软件，可以帮助我们直接去转译less为css，使用比较方便	根据提示进行处理koala的问题即可	http://koala-app.com/index-zh.html
就业扩展技术	框架插件应用	开发工具	sublime text3基本使用	sublime text 3 是比较快的前端编辑工具，有比较丰富的查插件库，可以方便前端开发	按照步骤进行配置，主要是按照package 包	编写代码的工具主要是看大家的书写习惯，时间长了就能熟练掌握了	http://www.sublimetext.com/
就业扩展技术	框架插件应用	插件	flexible.js适配移动端	阿里系出的解决移动端适配的方案	需要学习它的一套处理流程，按照处理流程进行相关的处理	按照flexible.js的要求进行配置框架，按照流程进行配置即可	http://www.aspku.com/kaifa/javascript/83312.html
就业扩展技术	框架插件应用	插件	使用iscroll.js制作轮播效果	每个需要使用滚动功能的区域均要进行初始化，而且处理了很多移动端的兼容性问题	API方法比较多，需要阅读API的方法进行配置滚动插件的使用	同框架的学习方法	https://segmentfault.com/a/1190000003113280
就业扩展技术	微信开发	微信开发	模板样式的抽取	模板样式的抽取	模板样式的抽取\本地数据与网络数据绑定	掌握模板样式的抽取才能应付程序的开发	https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/template.html
就业扩展技术	微信开发	微信开发	掌握开屏页和推荐页的开发	掌握开屏页的布局	小程序文件类型与目录结构\如何注册页面	掌握页面骨架(wxml\wxss\js\json)	https://mp.weixin.qq.com/debug/wxadoc/introduction/#开发者工具的使用
就业扩展技术	微信开发	微信开发	掌握阅读列表页和详情页的开发	掌握程序生命周期	Swiper组件构建 js与page页面的生命周期	通过了解swiper与js\page页面的开发	https://mp.weixin.qq.com/debug/wxadoc/dev/index.html?t=201818
就业扩展技术	微信开发	微信开发	掌握电影页及详情页的开发	掌握评分组件的实现	上拉加载数据\下滑刷新数据	tap选项卡使用与模块化进阶	https://mp.weixin.qq.com/debug/wxadoc/dev/index.html?t=201818
就业扩展技术	微信开发	微信开发	掌握视频列表的构建	掌握视频列表构建\加深wxss布局操作理解	img作为背景添加\加深wxss布局操作理	Video扩建的使用	https://mp.weixin.qq.com/debug/wxadoc/dev/component/